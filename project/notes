----------------------------------------------------
ANALYSIS
----------------------------------------------------
network arch
- camera detecting range???

- sensor luminosidade não é GPIO (I2C??)
----------------------------------------------------
DESIGN
----------------------------------------------------
network arch
- aloha?
- consumo por nodo
- num ligações por gateway (packets per node)
- range do sinal
- segurança?

definir tempo que a lampada fica ligada após uma deteção
connection error -> light turn on automatically??=?=
----------------------------------------------------
HW
----------------------------------------------------
lâmpada controlável 12 V, CC

Geolocation- A LoRaWAN network can determine the location of end devices using triangulation without the need for GPS. A LoRa end device can be located if at least three gateways pick up its signal.????????


---------------------------------------------------
IMAGE PROCESSING
---------------------------------------------------
Canny edge detection:
	- Multi-stage algorithm

	Stages:
		- Convert to grey image: Igray = 0.213(Ired )+0.715(Igreen)+0.072(Iblue);
		- Noise reduction: Process Gaussian blur filter 5x5;
		- Apply Hough Line Transform to detect lines in the image
		- Isolate the horizontal lines
		- Isolate the 
		- Determine the coordinates
		- Detect parking spots with empty
		- Register coordinates of parking spots
		- ....


---------------------------------------------------
Threads Local system
---------------------------------------------------
Camera
	- adquirir
	- processar

Controlo lampada: depende na receção LoRa, no PIR e no LDR
	- controlo PWM

Comunicação(LoRa) (Deamon)
	- receber
	- intrepertar (parse)
	- enviar

Leitura dos Sensores (Deamon): usar semáforos para provocar a leitura de cada sensor. Os semaforos são ativados num sigHandler provocado por um timer?? Mutexes protegem a operação de leitura dos pinos
	- Pir interrupção 
	- LDR luminusidade 5 min
	- failure

----------//-------------

- tCamera: acquire camera frame and process it
- tLampControl: changes PWM applied to the lamp

- dLoraComms: deals with lora communications
	- tSendLora: send a message
	- tRecvLora: receive a message



- dReadSensors: read all sensors
	- 	

---------------------------------------------------
Threads Gateway
---------------------------------------------------
Comunicação(LoRa): pode depender na receção TCP
	- receber
	- enviar

Comunicação(TCP-client): pode depender na receção Lora
	- receber 
	- enviar

---------------------------------------------------
Threads Remote Server
---------------------------------------------------
Comunicação(TCP-server)
	- receber 
	- interpretar (parse)
	- enviar

Database Manager (Daemon)
	- queries??

---------------------------------------------------
Threads Remote Client
---------------------------------------------------




---------------------------------------------------
Thread Definition
---------------------------------------------------

**LAMP CONTROL
	mutex 			mutChangePWM
	condVariable 	condNewPWM


	- PIR
	    mutex_lock(mutChangePWM)
	    pwm_val = 100%;
	    pthread_cond_signal(condNewPWM);
	    mutex_unlock(mutChangePWM);

	- LDR
		timer

	 ------
	 - tLampControl
	    mutex_lock(mutChangePWM)
	    pthread_cond_wait(mutChangePWM, condNewPWM)
	    
	    setPWM(pwm_val)

	    pthread_mutex_unlock(&mutChangePWM);    

	    if(pwm == MAX)
	    	activateTimer()

	------
	signHandl
		mutex_lock(mutChangePWM)
	    pwm_val = MIN%;
	    pthread_cond_signal(condNewPWM);
	    mutex_unlock(mutChangePWM);


**CAMERA
	mutCamera
	condCameraAcquire


tCamera
	CameraInit();

	ativaCamTimer
	
	while(1)
		mutex_lock(mutCamera);
		pthread_cond_wait(condCameraAcquire)
		Activate timerMaxTime
		Acquire frame
		Process
		[Notification]
		Disable Timer
		mutex_unlock(mutCamera)

	

	SignHandle
		pthread_cond_signal(condCameraAcquire)
		restart(timer)


	TIMEOUT timerMaxTime
		SignHandle
			send error to syslog




**COMUNICAÇÃO LORA (LOCALSYS - GATEWAY)

Comunicação(LoRa):
	- receber
		ligar lampada
		ACK????
		if !ACK
		 	envia novamente
		
		verify services
			check connection

	- enviar (messages)
		- turn on/off light notification
		- light failure notification
		- park found notification
		- error messages 
			.camera time error
			.ACK


	- tLoRaReceive
		while(1)
			pthread_lock(mutComms);

			message = Receive()
			pthread_unlock(mutComms);
			if(message not empty)
				Parse_command(message)

	- tLoRaSend
		while(1)
			pthread_lock(mutSend);
			pthread_cond_wait(condSend, mutSend);
			
			pthread_lock(mutComms);
			send(message)
			pthread_unlock(mutComms);

			pthread_unlock(mutSend);


COMMANDS
	- ACK 










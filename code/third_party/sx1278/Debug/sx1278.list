
sx1278.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c20  08005c20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c28  08005c28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000070  08005ca0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08005ca0  00020620  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012875  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  00032913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00035110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00035c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a33  00000000  00000000  000366c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc41  00000000  00000000  0005f0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4cbc  00000000  00000000  0006ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001639f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  00163a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080059f8 	.word	0x080059f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080059f8 	.word	0x080059f8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	78fa      	ldrb	r2, [r7, #3]
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fbd0 	bl	8000d92 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fbeb 	bl	8000dd2 <SX1278_hw_SPIReadByte>
 80005fc:	4603      	mov	r3, r0
 80005fe:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2101      	movs	r1, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fb88 	bl	8000d1c <SX1278_hw_SetNSS>
	return tmp;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	460b      	mov	r3, r1
 8000620:	70fb      	strb	r3, [r7, #3]
 8000622:	4613      	mov	r3, r2
 8000624:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fb75 	bl	8000d1c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	4610      	mov	r0, r2
 8000642:	f000 fba6 	bl	8000d92 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	78ba      	ldrb	r2, [r7, #2]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fb9f 	bl	8000d92 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fb5e 	bl	8000d1c <SX1278_hw_SetNSS>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b087      	sub	sp, #28
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	461a      	mov	r2, r3
 8000674:	460b      	mov	r3, r1
 8000676:	72fb      	strb	r3, [r7, #11]
 8000678:	4613      	mov	r3, r2
 800067a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800067c:	7abb      	ldrb	r3, [r7, #10]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d927      	bls.n	80006d2 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb47 	bl	8000d1c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	7afa      	ldrb	r2, [r7, #11]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fb7b 	bl	8000d92 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]
 80006a0:	e00c      	b.n	80006bc <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	18d4      	adds	r4, r2, r3
 80006ac:	4608      	mov	r0, r1
 80006ae:	f000 fb90 	bl	8000dd2 <SX1278_hw_SPIReadByte>
 80006b2:	4603      	mov	r3, r0
 80006b4:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	3301      	adds	r3, #1
 80006ba:	75fb      	strb	r3, [r7, #23]
 80006bc:	7dfa      	ldrb	r2, [r7, #23]
 80006be:	7abb      	ldrb	r3, [r7, #10]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3ee      	bcc.n	80006a2 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fb26 	bl	8000d1c <SX1278_hw_SetNSS>
 80006d0:	e000      	b.n	80006d4 <SX1278_SPIBurstRead+0x6c>
		return;
 80006d2:	bf00      	nop
	}
}
 80006d4:	371c      	adds	r7, #28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd90      	pop	{r4, r7, pc}

080006da <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	461a      	mov	r2, r3
 80006e6:	460b      	mov	r3, r1
 80006e8:	72fb      	strb	r3, [r7, #11]
 80006ea:	4613      	mov	r3, r2
 80006ec:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80006ee:	7abb      	ldrb	r3, [r7, #10]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d929      	bls.n	8000748 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fb0e 	bl	8000d1c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	4610      	mov	r0, r2
 8000710:	f000 fb3f 	bl	8000d92 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000714:	2300      	movs	r3, #0
 8000716:	75fb      	strb	r3, [r7, #23]
 8000718:	e00b      	b.n	8000732 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4619      	mov	r1, r3
 8000728:	f000 fb33 	bl	8000d92 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	3301      	adds	r3, #1
 8000730:	75fb      	strb	r3, [r7, #23]
 8000732:	7dfa      	ldrb	r2, [r7, #23]
 8000734:	7abb      	ldrb	r3, [r7, #10]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3ef      	bcc.n	800071a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f000 faeb 	bl	8000d1c <SX1278_hw_SetNSS>
 8000746:	e000      	b.n	800074a <SX1278_SPIBurstWrite+0x70>
		return;
 8000748:	bf00      	nop
	}
}
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f90d 	bl	8000978 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800075e:	200f      	movs	r0, #15
 8000760:	f000 fb5d 	bl	8000e1e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 f917 	bl	8000998 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	f04f 0100 	mov.w	r1, #0
 8000778:	04d9      	lsls	r1, r3, #19
 800077a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800077e:	04d0      	lsls	r0, r2, #19
 8000780:	4a6f      	ldr	r2, [pc, #444]	; (8000940 <SX1278_config+0x1f0>)
 8000782:	f04f 0300 	mov.w	r3, #0
 8000786:	f7ff fdab 	bl	80002e0 <__aeabi_uldivmod>
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000792:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	0c02      	lsrs	r2, r0, #16
 80007a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007a4:	0c0b      	lsrs	r3, r1, #16
 80007a6:	b2d3      	uxtb	r3, r2
 80007a8:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80007aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	0a02      	lsrs	r2, r0, #8
 80007b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80007bc:	0a0b      	lsrs	r3, r1, #8
 80007be:	b2d3      	uxtb	r3, r2
 80007c0:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80007c2:	7c3b      	ldrb	r3, [r7, #16]
 80007c4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80007c6:	f107 020c 	add.w	r2, r7, #12
 80007ca:	2303      	movs	r3, #3
 80007cc:	2106      	movs	r1, #6
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff83 	bl	80006da <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80007d4:	2234      	movs	r2, #52	; 0x34
 80007d6:	2139      	movs	r1, #57	; 0x39
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff1c 	bl	8000616 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7c1b      	ldrb	r3, [r3, #16]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b57      	ldr	r3, [pc, #348]	; (8000944 <SX1278_config+0x1f4>)
 80007e6:	5c9b      	ldrb	r3, [r3, r2]
 80007e8:	461a      	mov	r2, r3
 80007ea:	2109      	movs	r1, #9
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff12 	bl	8000616 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80007f2:	220b      	movs	r2, #11
 80007f4:	210b      	movs	r1, #11
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ff0d 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80007fc:	2223      	movs	r2, #35	; 0x23
 80007fe:	210c      	movs	r1, #12
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff08 	bl	8000616 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7c5b      	ldrb	r3, [r3, #17]
 800080a:	461a      	mov	r2, r3
 800080c:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <SX1278_config+0x1f8>)
 800080e:	5c9b      	ldrb	r3, [r3, r2]
 8000810:	2b06      	cmp	r3, #6
 8000812:	d147      	bne.n	80008a4 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7c9b      	ldrb	r3, [r3, #18]
 8000818:	461a      	mov	r2, r3
 800081a:	4b4c      	ldr	r3, [pc, #304]	; (800094c <SX1278_config+0x1fc>)
 800081c:	5c9b      	ldrb	r3, [r3, r2]
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7cdb      	ldrb	r3, [r3, #19]
 8000826:	4619      	mov	r1, r3
 8000828:	4b49      	ldr	r3, [pc, #292]	; (8000950 <SX1278_config+0x200>)
 800082a:	5c5b      	ldrb	r3, [r3, r1]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4413      	add	r3, r2
 8000832:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000834:	3301      	adds	r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	211d      	movs	r1, #29
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff feea 	bl	8000616 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7c5b      	ldrb	r3, [r3, #17]
 8000846:	461a      	mov	r2, r3
 8000848:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <SX1278_config+0x1f8>)
 800084a:	5c9b      	ldrb	r3, [r3, r2]
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7d1b      	ldrb	r3, [r3, #20]
 8000854:	4619      	mov	r1, r3
 8000856:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <SX1278_config+0x204>)
 8000858:	5c5b      	ldrb	r3, [r3, r1]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000862:	3303      	adds	r3, #3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	211e      	movs	r1, #30
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fed3 	bl	8000616 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000870:	2131      	movs	r1, #49	; 0x31
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff feb0 	bl	80005d8 <SX1278_SPIRead>
 8000878:	4603      	mov	r3, r0
 800087a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	f023 0307 	bic.w	r3, r3, #7
 8000882:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	f043 0305 	orr.w	r3, r3, #5
 800088a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	461a      	mov	r2, r3
 8000890:	2131      	movs	r1, #49	; 0x31
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff febf 	bl	8000616 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000898:	220c      	movs	r2, #12
 800089a:	2137      	movs	r1, #55	; 0x37
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff feba 	bl	8000616 <SX1278_SPIWrite>
 80008a2:	e029      	b.n	80008f8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7c9b      	ldrb	r3, [r3, #18]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <SX1278_config+0x1fc>)
 80008ac:	5c9b      	ldrb	r3, [r3, r2]
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7cdb      	ldrb	r3, [r3, #19]
 80008b6:	4619      	mov	r1, r3
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SX1278_config+0x200>)
 80008ba:	5c5b      	ldrb	r3, [r3, r1]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008c0:	4413      	add	r3, r2
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	211d      	movs	r1, #29
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fea4 	bl	8000616 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7c5b      	ldrb	r3, [r3, #17]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <SX1278_config+0x1f8>)
 80008d6:	5c9b      	ldrb	r3, [r3, r2]
 80008d8:	011b      	lsls	r3, r3, #4
 80008da:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7d1b      	ldrb	r3, [r3, #20]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <SX1278_config+0x204>)
 80008e4:	5c5b      	ldrb	r3, [r3, r1]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008ea:	4413      	add	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	211e      	movs	r1, #30
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fe8f 	bl	8000616 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80008f8:	2204      	movs	r2, #4
 80008fa:	2126      	movs	r1, #38	; 0x26
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fe8a 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000902:	2208      	movs	r2, #8
 8000904:	211f      	movs	r1, #31
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fe85 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800090c:	2200      	movs	r2, #0
 800090e:	2120      	movs	r1, #32
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff fe80 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000916:	2208      	movs	r2, #8
 8000918:	2121      	movs	r1, #33	; 0x21
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fe7b 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000920:	2201      	movs	r2, #1
 8000922:	2141      	movs	r1, #65	; 0x41
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fe76 	bl	8000616 <SX1278_SPIWrite>
	module->readBytes = 0;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 f810 	bl	8000958 <SX1278_standby>
}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	01e84800 	.word	0x01e84800
 8000944:	08005bb4 	.word	0x08005bb4
 8000948:	08005bb8 	.word	0x08005bb8
 800094c:	08005bc0 	.word	0x08005bc0
 8000950:	08005bcc 	.word	0x08005bcc
 8000954:	08005bd0 	.word	0x08005bd0

08000958 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000960:	2209      	movs	r2, #9
 8000962:	2101      	movs	r1, #1
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fe56 	bl	8000616 <SX1278_SPIWrite>
	module->status = STANDBY;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2201      	movs	r2, #1
 800096e:	759a      	strb	r2, [r3, #22]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000980:	2208      	movs	r2, #8
 8000982:	2101      	movs	r1, #1
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fe46 	bl	8000616 <SX1278_SPIWrite>
	module->status = SLEEP;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	759a      	strb	r2, [r3, #22]
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80009a0:	2288      	movs	r2, #136	; 0x88
 80009a2:	2101      	movs	r1, #1
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fe36 	bl	8000616 <SX1278_SPIWrite>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	2112      	movs	r1, #18
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fe29 	bl	8000616 <SX1278_SPIWrite>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	460b      	mov	r3, r1
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	7afa      	ldrb	r2, [r7, #11]
 80009de:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff feb5 	bl	8000750 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80009e6:	2284      	movs	r2, #132	; 0x84
 80009e8:	214d      	movs	r1, #77	; 0x4d
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff fe13 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80009f0:	22ff      	movs	r2, #255	; 0xff
 80009f2:	2124      	movs	r1, #36	; 0x24
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fe0e 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff fe09 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000a04:	223f      	movs	r2, #63	; 0x3f
 8000a06:	2111      	movs	r1, #17
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fe04 	bl	8000616 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f7ff ffcf 	bl	80009b2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000a14:	7afb      	ldrb	r3, [r7, #11]
 8000a16:	461a      	mov	r2, r3
 8000a18:	2122      	movs	r1, #34	; 0x22
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff fdfb 	bl	8000616 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000a20:	210f      	movs	r1, #15
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fdd8 	bl	80005d8 <SX1278_SPIRead>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	210d      	movs	r1, #13
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff fdef 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000a38:	228d      	movs	r2, #141	; 0x8d
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff fdea 	bl	8000616 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000a4a:	2118      	movs	r1, #24
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f7ff fdc3 	bl	80005d8 <SX1278_SPIRead>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d104      	bne.n	8000a66 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2203      	movs	r2, #3
 8000a60:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e013      	b.n	8000a8e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d109      	bne.n	8000a86 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f967 	bl	8000d4a <SX1278_hw_Reset>
			SX1278_config(module);
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fe67 	bl	8000750 <SX1278_config>
			return 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e003      	b.n	8000a8e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 f9c9 	bl	8000e1e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000a8c:	e7dd      	b.n	8000a4a <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f9c6 	bl	8000e34 <SX1278_hw_GetDIO0>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d030      	beq.n	8000b10 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3317      	adds	r3, #23
 8000ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fb39 	bl	8005130 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000abe:	2110      	movs	r1, #16
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fd89 	bl	80005d8 <SX1278_SPIRead>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	461a      	mov	r2, r3
 8000ace:	210d      	movs	r1, #13
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fda0 	bl	8000616 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7c5b      	ldrb	r3, [r3, #17]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7d5b      	ldrb	r3, [r3, #21]
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e005      	b.n	8000af2 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000ae6:	2113      	movs	r1, #19
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fd75 	bl	80005d8 <SX1278_SPIRead>
 8000aee:	4603      	mov	r3, r0
 8000af0:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f103 0217 	add.w	r2, r3, #23
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2100      	movs	r1, #0
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fdb3 	bl	8000668 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff51 	bl	80009b2 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	460b      	mov	r3, r1
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	7afa      	ldrb	r2, [r7, #11]
 8000b30:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f7ff fe0c 	bl	8000750 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000b38:	2287      	movs	r2, #135	; 0x87
 8000b3a:	214d      	movs	r1, #77	; 0x4d
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff fd6a 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000b42:	2200      	movs	r2, #0
 8000b44:	2124      	movs	r1, #36	; 0x24
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff fd65 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000b4c:	2241      	movs	r2, #65	; 0x41
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fd60 	bl	8000616 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff ff2b 	bl	80009b2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000b5c:	22f7      	movs	r2, #247	; 0xf7
 8000b5e:	2111      	movs	r1, #17
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff fd58 	bl	8000616 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000b66:	7afb      	ldrb	r3, [r7, #11]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2122      	movs	r1, #34	; 0x22
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff fd52 	bl	8000616 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000b72:	210e      	movs	r1, #14
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f7ff fd2f 	bl	80005d8 <SX1278_SPIRead>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	461a      	mov	r2, r3
 8000b82:	210d      	movs	r1, #13
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff fd46 	bl	8000616 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000b8a:	2122      	movs	r1, #34	; 0x22
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff fd23 	bl	80005d8 <SX1278_SPIRead>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000b96:	7dba      	ldrb	r2, [r7, #22]
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d104      	bne.n	8000ba8 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	759a      	strb	r2, [r3, #22]
			return 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e00e      	b.n	8000bc6 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1ea      	bne.n	8000b8a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f8c6 	bl	8000d4a <SX1278_hw_Reset>
			SX1278_config(module);
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fdc6 	bl	8000750 <SX1278_config>
			return 0;
 8000bc4:	2300      	movs	r3, #0
		}
	}
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	2100      	movs	r1, #0
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff fd78 	bl	80006da <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000bea:	228b      	movs	r2, #139	; 0x8b
 8000bec:	2101      	movs	r1, #1
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fd11 	bl	8000616 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f91b 	bl	8000e34 <SX1278_hw_GetDIO0>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00b      	beq.n	8000c1c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000c04:	2112      	movs	r1, #18
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fce6 	bl	80005d8 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff fed0 	bl	80009b2 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f7ff fea0 	bl	8000958 <SX1278_standby>
			return 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e013      	b.n	8000c44 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d109      	bne.n	8000c3c <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f88c 	bl	8000d4a <SX1278_hw_Reset>
			SX1278_config(module);
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f7ff fd8c 	bl	8000750 <SX1278_config>
			return 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e003      	b.n	8000c44 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 f8ee 	bl	8000e1e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000c42:	e7d7      	b.n	8000bf4 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f848 	bl	8000cf2 <SX1278_hw_init>
	module->frequency = frequency;
 8000c62:	68f9      	ldr	r1, [r7, #12]
 8000c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c68:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	7e3a      	ldrb	r2, [r7, #24]
 8000c70:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	7f3a      	ldrb	r2, [r7, #28]
 8000c76:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c7e:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c86:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c8e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000c96:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fd59 	bl	8000750 <SX1278_config>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d003      	beq.n	8000cc8 <SX1278_read+0x22>
		length = module->readBytes;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000cc6:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3317      	adds	r3, #23
 8000ccc:	79fa      	ldrb	r2, [r7, #7]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	68b8      	ldr	r0, [r7, #8]
 8000cd2:	f004 fa1f 	bl	8005114 <memcpy>
	rxBuf[length] = '\0';
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f80d 	bl	8000d1c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6858      	ldr	r0, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f001 f9a8 	bl	8002064 <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6958      	ldr	r0, [r3, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	b299      	uxth	r1, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	bf0c      	ite	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	2300      	movne	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f001 f991 	bl	8002064 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000d52:	2101      	movs	r1, #1
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ffe1 	bl	8000d1c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6858      	ldr	r0, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	f001 f97c 	bl	8002064 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 f856 	bl	8000e1e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6858      	ldr	r0, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f001 f970 	bl	8002064 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000d84:	2064      	movs	r0, #100	; 0x64
 8000d86:	f000 f84a 	bl	8000e1e <SX1278_hw_DelayMs>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ffbb 	bl	8000d1c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6998      	ldr	r0, [r3, #24]
 8000daa:	1cf9      	adds	r1, r7, #3
 8000dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db0:	2201      	movs	r2, #1
 8000db2:	f002 fb42 	bl	800343a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000db6:	bf00      	nop
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 febd 	bl	8003b3c <HAL_SPI_GetState>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d1f7      	bne.n	8000db8 <SX1278_hw_SPICommand+0x26>
		;
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af02      	add	r7, sp, #8
 8000dd8:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000de2:	2100      	movs	r1, #0
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff99 	bl	8000d1c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6998      	ldr	r0, [r3, #24]
 8000dee:	f107 020e 	add.w	r2, r7, #14
 8000df2:	f107 010f 	add.w	r1, r7, #15
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f002 fc8a 	bl	8003716 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000e02:	bf00      	nop
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fe97 	bl	8003b3c <HAL_SPI_GetState>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d1f7      	bne.n	8000e04 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fd90 	bl	800194c <HAL_Delay>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	4610      	mov	r0, r2
 8000e4a:	f001 f8f3 	bl	8002034 <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a3b      	ldr	r2, [pc, #236]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a35      	ldr	r2, [pc, #212]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_GPIO_Init+0x108>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2110      	movs	r1, #16
 8000ede:	4824      	ldr	r0, [pc, #144]	; (8000f70 <MX_GPIO_Init+0x10c>)
 8000ee0:	f001 f8c0 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4822      	ldr	r0, [pc, #136]	; (8000f74 <MX_GPIO_Init+0x110>)
 8000eea:	f001 f8bb 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	4820      	ldr	r0, [pc, #128]	; (8000f74 <MX_GPIO_Init+0x110>)
 8000ef4:	f001 f8b6 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <MX_GPIO_Init+0x10c>)
 8000f10:	f000 fee4 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000f14:	2301      	movs	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_GPIO_Init+0x110>)
 8000f28:	f000 fed8 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RESET_Pin|LED_Pin;
 8000f2c:	2382      	movs	r3, #130	; 0x82
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_GPIO_Init+0x110>)
 8000f44:	f000 feca 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8000f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000f5e:	f000 febd 	bl	8001cdc <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	00000000 	.word	0x00000000

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f000 fc84 	bl	8001892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f999 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f7ff ff69 	bl	8000e64 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000f92:	f000 fa2b 	bl	80013ec <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000f96:	f000 fb69 	bl	800166c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	48aa      	ldr	r0, [pc, #680]	; (8001248 <main+0x2c8>)
 8000fa0:	f001 f848 	bl	8002034 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4ba8      	ldr	r3, [pc, #672]	; (800124c <main+0x2cc>)
 8000faa:	601a      	str	r2, [r3, #0]
	if (master == 1) {
 8000fac:	4ba7      	ldr	r3, [pc, #668]	; (800124c <main+0x2cc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d109      	bne.n	8000fc8 <main+0x48>
		UART_puts("Mode: Master\r\n");
 8000fb4:	48a6      	ldr	r0, [pc, #664]	; (8001250 <main+0x2d0>)
 8000fb6:	f000 fc1f 	bl	80017f8 <UART_puts>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc0:	48a1      	ldr	r0, [pc, #644]	; (8001248 <main+0x2c8>)
 8000fc2:	f001 f84f 	bl	8002064 <HAL_GPIO_WritePin>
 8000fc6:	e008      	b.n	8000fda <main+0x5a>
	} else {
		UART_puts("Mode: Slave\r\n");
 8000fc8:	48a2      	ldr	r0, [pc, #648]	; (8001254 <main+0x2d4>)
 8000fca:	f000 fc15 	bl	80017f8 <UART_puts>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd4:	489c      	ldr	r0, [pc, #624]	; (8001248 <main+0x2c8>)
 8000fd6:	f001 f845 	bl	8002064 <HAL_GPIO_WritePin>
	}

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000fda:	4b9f      	ldr	r3, [pc, #636]	; (8001258 <main+0x2d8>)
 8000fdc:	4a9f      	ldr	r2, [pc, #636]	; (800125c <main+0x2dc>)
 8000fde:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000fe0:	4b9d      	ldr	r3, [pc, #628]	; (8001258 <main+0x2d8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000fe6:	4b9c      	ldr	r3, [pc, #624]	; (8001258 <main+0x2d8>)
 8000fe8:	4a9d      	ldr	r2, [pc, #628]	; (8001260 <main+0x2e0>)
 8000fea:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000fec:	4b9a      	ldr	r3, [pc, #616]	; (8001258 <main+0x2d8>)
 8000fee:	2210      	movs	r2, #16
 8000ff0:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000ff2:	4b99      	ldr	r3, [pc, #612]	; (8001258 <main+0x2d8>)
 8000ff4:	4a99      	ldr	r2, [pc, #612]	; (800125c <main+0x2dc>)
 8000ff6:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8000ff8:	4b97      	ldr	r3, [pc, #604]	; (8001258 <main+0x2d8>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi2;
 8000ffe:	4b96      	ldr	r3, [pc, #600]	; (8001258 <main+0x2d8>)
 8001000:	4a98      	ldr	r2, [pc, #608]	; (8001264 <main+0x2e4>)
 8001002:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8001004:	4b98      	ldr	r3, [pc, #608]	; (8001268 <main+0x2e8>)
 8001006:	4a94      	ldr	r2, [pc, #592]	; (8001258 <main+0x2d8>)
 8001008:	601a      	str	r2, [r3, #0]

	UART_puts("Configuring LoRa module\r\n");
 800100a:	4898      	ldr	r0, [pc, #608]	; (800126c <main+0x2ec>)
 800100c:	f000 fbf4 	bl	80017f8 <UART_puts>
	SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8001010:	230a      	movs	r3, #10
 8001012:	9305      	str	r3, [sp, #20]
 8001014:	2300      	movs	r3, #0
 8001016:	9304      	str	r3, [sp, #16]
 8001018:	2300      	movs	r3, #0
 800101a:	9303      	str	r3, [sp, #12]
 800101c:	2307      	movs	r3, #7
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2301      	movs	r3, #1
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	a385      	add	r3, pc, #532	; (adr r3, 8001240 <main+0x2c0>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	488e      	ldr	r0, [pc, #568]	; (8001268 <main+0x2e8>)
 8001030:	f7ff fe0c 	bl	8000c4c <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	UART_puts("Done configuring LoRaModule\r\n");
 8001034:	488e      	ldr	r0, [pc, #568]	; (8001270 <main+0x2f0>)
 8001036:	f000 fbdf 	bl	80017f8 <UART_puts>

	if (master == 1) {
 800103a:	4b84      	ldr	r3, [pc, #528]	; (800124c <main+0x2cc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d10e      	bne.n	8001060 <main+0xe0>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001042:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001046:	2110      	movs	r1, #16
 8001048:	4887      	ldr	r0, [pc, #540]	; (8001268 <main+0x2e8>)
 800104a:	f7ff fd68 	bl	8000b1e <SX1278_LoRaEntryTx>
 800104e:	4603      	mov	r3, r0
 8001050:	4a88      	ldr	r2, [pc, #544]	; (8001274 <main+0x2f4>)
 8001052:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	4880      	ldr	r0, [pc, #512]	; (800125c <main+0x2dc>)
 800105a:	f001 f803 	bl	8002064 <HAL_GPIO_WritePin>
 800105e:	e00d      	b.n	800107c <main+0xfc>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8001060:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001064:	2110      	movs	r1, #16
 8001066:	4880      	ldr	r0, [pc, #512]	; (8001268 <main+0x2e8>)
 8001068:	f7ff fcb0 	bl	80009cc <SX1278_LoRaEntryRx>
 800106c:	4603      	mov	r3, r0
 800106e:	4a81      	ldr	r2, [pc, #516]	; (8001274 <main+0x2f4>)
 8001070:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	4879      	ldr	r0, [pc, #484]	; (800125c <main+0x2dc>)
 8001078:	f000 fff4 	bl	8002064 <HAL_GPIO_WritePin>
	}

	if(ret == 1)
 800107c:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <main+0x2f4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d103      	bne.n	800108c <main+0x10c>
		UART_puts("EntryTX: Entering reception mode\r\n");
 8001084:	487c      	ldr	r0, [pc, #496]	; (8001278 <main+0x2f8>)
 8001086:	f000 fbb7 	bl	80017f8 <UART_puts>
 800108a:	e002      	b.n	8001092 <main+0x112>
	else
		UART_puts("EntryTX: Timeout exceeded\r\n");
 800108c:	487b      	ldr	r0, [pc, #492]	; (800127c <main+0x2fc>)
 800108e:	f000 fbb3 	bl	80017f8 <UART_puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (master == 1)
 8001092:	4b6e      	ldr	r3, [pc, #440]	; (800124c <main+0x2cc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d150      	bne.n	800113c <main+0x1bc>
	  {
		UART_puts("\r\nMaster ...\r\n");
 800109a:	4879      	ldr	r0, [pc, #484]	; (8001280 <main+0x300>)
 800109c:	f000 fbac 	bl	80017f8 <UART_puts>
		HAL_Delay(1000);
 80010a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a4:	f000 fc52 	bl	800194c <HAL_Delay>
//		UART_puts("Sending package...\r\n");

		message_length = sprintf(buffer, "Hello %d", message);
 80010a8:	4b76      	ldr	r3, [pc, #472]	; (8001284 <main+0x304>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4976      	ldr	r1, [pc, #472]	; (8001288 <main+0x308>)
 80010b0:	4876      	ldr	r0, [pc, #472]	; (800128c <main+0x30c>)
 80010b2:	f004 f879 	bl	80051a8 <siprintf>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a75      	ldr	r2, [pc, #468]	; (8001290 <main+0x310>)
 80010ba:	6013      	str	r3, [r2, #0]
		ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 80010bc:	4b74      	ldr	r3, [pc, #464]	; (8001290 <main+0x310>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010c6:	4619      	mov	r1, r3
 80010c8:	4867      	ldr	r0, [pc, #412]	; (8001268 <main+0x2e8>)
 80010ca:	f7ff fd28 	bl	8000b1e <SX1278_LoRaEntryTx>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a68      	ldr	r2, [pc, #416]	; (8001274 <main+0x2f4>)
 80010d2:	6013      	str	r3, [r2, #0]

		// lora entry TX return value - ret
		// 1 if entering reception mode
		// 0 if timeout was exceeded
		if(ret == 1)
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <main+0x2f4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d103      	bne.n	80010e4 <main+0x164>
			UART_puts("EntryTX: Entering reception mode\r\n");
 80010dc:	4866      	ldr	r0, [pc, #408]	; (8001278 <main+0x2f8>)
 80010de:	f000 fb8b 	bl	80017f8 <UART_puts>
 80010e2:	e002      	b.n	80010ea <main+0x16a>
		else
			UART_puts("EntryTX: Timeout exceeded\r\n");
 80010e4:	4865      	ldr	r0, [pc, #404]	; (800127c <main+0x2fc>)
 80010e6:	f000 fb87 	bl	80017f8 <UART_puts>

//		snprintf(str, sizeof(str), "TX Entry retval: %d\r\n", ret);
//		UART_puts(str);

		snprintf(str, sizeof(str), "Sending [%s]\r\n", buffer);
 80010ea:	4b68      	ldr	r3, [pc, #416]	; (800128c <main+0x30c>)
 80010ec:	4a69      	ldr	r2, [pc, #420]	; (8001294 <main+0x314>)
 80010ee:	2140      	movs	r1, #64	; 0x40
 80010f0:	4869      	ldr	r0, [pc, #420]	; (8001298 <main+0x318>)
 80010f2:	f004 f825 	bl	8005140 <sniprintf>
		UART_puts(str);
 80010f6:	4868      	ldr	r0, [pc, #416]	; (8001298 <main+0x318>)
 80010f8:	f000 fb7e 	bl	80017f8 <UART_puts>
		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer, message_length, 2000);
 80010fc:	4b64      	ldr	r3, [pc, #400]	; (8001290 <main+0x310>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001106:	4961      	ldr	r1, [pc, #388]	; (800128c <main+0x30c>)
 8001108:	4857      	ldr	r0, [pc, #348]	; (8001268 <main+0x2e8>)
 800110a:	f7ff fd60 	bl	8000bce <SX1278_LoRaTxPacket>
 800110e:	4603      	mov	r3, r0
 8001110:	4a58      	ldr	r2, [pc, #352]	; (8001274 <main+0x2f4>)
 8001112:	6013      	str	r3, [r2, #0]
		message += 1;
 8001114:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <main+0x304>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a5a      	ldr	r2, [pc, #360]	; (8001284 <main+0x304>)
 800111c:	6013      	str	r3, [r2, #0]

		if(ret == 1)
 800111e:	4b55      	ldr	r3, [pc, #340]	; (8001274 <main+0x2f4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d103      	bne.n	800112e <main+0x1ae>
			UART_puts("TxPacket: Entering reception mode\r\n");
 8001126:	485d      	ldr	r0, [pc, #372]	; (800129c <main+0x31c>)
 8001128:	f000 fb66 	bl	80017f8 <UART_puts>
 800112c:	e002      	b.n	8001134 <main+0x1b4>
		else
			UART_puts("TxPacket: Timeout exceeded\r\n");
 800112e:	485c      	ldr	r0, [pc, #368]	; (80012a0 <main+0x320>)
 8001130:	f000 fb62 	bl	80017f8 <UART_puts>

//		snprintf(str, sizeof(str), "TX retval: %d\r\n", ret);
//		UART_puts(str);
		UART_puts("Package sent...\r\n");
 8001134:	485b      	ldr	r0, [pc, #364]	; (80012a4 <main+0x324>)
 8001136:	f000 fb5f 	bl	80017f8 <UART_puts>
 800113a:	e039      	b.n	80011b0 <main+0x230>

	  }
	  else
	  {
		UART_puts("\r\nSlave ...\r\n");
 800113c:	485a      	ldr	r0, [pc, #360]	; (80012a8 <main+0x328>)
 800113e:	f000 fb5b 	bl	80017f8 <UART_puts>
		HAL_Delay(800);
 8001142:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001146:	f000 fc01 	bl	800194c <HAL_Delay>
		UART_puts("Receiving package...\r\n");
 800114a:	4858      	ldr	r0, [pc, #352]	; (80012ac <main+0x32c>)
 800114c:	f000 fb54 	bl	80017f8 <UART_puts>

		do{
			ret = SX1278_LoRaRxPacket(&SX1278);
 8001150:	4845      	ldr	r0, [pc, #276]	; (8001268 <main+0x2e8>)
 8001152:	f7ff fca0 	bl	8000a96 <SX1278_LoRaRxPacket>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <main+0x2f4>)
 800115c:	601a      	str	r2, [r3, #0]
		} while(ret == 0);
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <main+0x2f4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f4      	beq.n	8001150 <main+0x1d0>

		snprintf(str, sizeof(str), "Received bytes: %d\r\n", ret);
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <main+0x2f4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <main+0x330>)
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	484a      	ldr	r0, [pc, #296]	; (8001298 <main+0x318>)
 8001170:	f003 ffe6 	bl	8005140 <sniprintf>
		UART_puts(str);
 8001174:	4848      	ldr	r0, [pc, #288]	; (8001298 <main+0x318>)
 8001176:	f000 fb3f 	bl	80017f8 <UART_puts>

		if (ret > 0) {
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <main+0x2f4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dd13      	ble.n	80011aa <main+0x22a>
			SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8001182:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <main+0x2f4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4940      	ldr	r1, [pc, #256]	; (800128c <main+0x30c>)
 800118c:	4836      	ldr	r0, [pc, #216]	; (8001268 <main+0x2e8>)
 800118e:	f7ff fd8a 	bl	8000ca6 <SX1278_read>

			snprintf(str, sizeof(str), "Content (%d): %s\r\n", ret, buffer);
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <main+0x2f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <main+0x30c>)
 8001198:	9200      	str	r2, [sp, #0]
 800119a:	4a46      	ldr	r2, [pc, #280]	; (80012b4 <main+0x334>)
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	483e      	ldr	r0, [pc, #248]	; (8001298 <main+0x318>)
 80011a0:	f003 ffce 	bl	8005140 <sniprintf>
			UART_puts(str);
 80011a4:	483c      	ldr	r0, [pc, #240]	; (8001298 <main+0x318>)
 80011a6:	f000 fb27 	bl	80017f8 <UART_puts>
		}
		UART_puts("Package received ...\r\n");
 80011aa:	4843      	ldr	r0, [pc, #268]	; (80012b8 <main+0x338>)
 80011ac:	f000 fb24 	bl	80017f8 <UART_puts>
	  }

		//change mode
		if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin))
 80011b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b4:	4824      	ldr	r0, [pc, #144]	; (8001248 <main+0x2c8>)
 80011b6:	f000 ff3d 	bl	8002034 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f af68 	bne.w	8001092 <main+0x112>
		{
			UART_puts("\r\nChanging mode...\r\n");
 80011c2:	483e      	ldr	r0, [pc, #248]	; (80012bc <main+0x33c>)
 80011c4:	f000 fb18 	bl	80017f8 <UART_puts>
			master = ~master & 0x01;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <main+0x2cc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <main+0x2cc>)
 80011de:	601a      	str	r2, [r3, #0]
			if (master == 1) {
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <main+0x2cc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10e      	bne.n	8001206 <main+0x286>
				ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80011e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011ec:	2110      	movs	r1, #16
 80011ee:	481e      	ldr	r0, [pc, #120]	; (8001268 <main+0x2e8>)
 80011f0:	f7ff fc95 	bl	8000b1e <SX1278_LoRaEntryTx>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <main+0x2f4>)
 80011f8:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <main+0x2dc>)
 8001200:	f000 ff30 	bl	8002064 <HAL_GPIO_WritePin>
 8001204:	e00d      	b.n	8001222 <main+0x2a2>
			} else {
				ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8001206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800120a:	2110      	movs	r1, #16
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <main+0x2e8>)
 800120e:	f7ff fbdd 	bl	80009cc <SX1278_LoRaEntryRx>
 8001212:	4603      	mov	r3, r0
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <main+0x2f4>)
 8001216:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <main+0x2dc>)
 800121e:	f000 ff21 	bl	8002064 <HAL_GPIO_WritePin>
			}
			HAL_Delay(1000);
 8001222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001226:	f000 fb91 	bl	800194c <HAL_Delay>
			while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin))
 800122a:	bf00      	nop
 800122c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <main+0x2c8>)
 8001232:	f000 feff 	bl	8002034 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f7      	beq.n	800122c <main+0x2ac>
	  if (master == 1)
 800123c:	e729      	b.n	8001092 <main+0x112>
 800123e:	bf00      	nop
 8001240:	19cf0e40 	.word	0x19cf0e40
 8001244:	00000000 	.word	0x00000000
 8001248:	40020800 	.word	0x40020800
 800124c:	20000420 	.word	0x20000420
 8001250:	08005a10 	.word	0x08005a10
 8001254:	08005a20 	.word	0x08005a20
 8001258:	20000404 	.word	0x20000404
 800125c:	40020400 	.word	0x40020400
 8001260:	40020000 	.word	0x40020000
 8001264:	20000424 	.word	0x20000424
 8001268:	200002e8 	.word	0x200002e8
 800126c:	08005a30 	.word	0x08005a30
 8001270:	08005a4c 	.word	0x08005a4c
 8001274:	20000400 	.word	0x20000400
 8001278:	08005a6c 	.word	0x08005a6c
 800127c:	08005a90 	.word	0x08005a90
 8001280:	08005aac 	.word	0x08005aac
 8001284:	200000a4 	.word	0x200000a4
 8001288:	08005abc 	.word	0x08005abc
 800128c:	200000a8 	.word	0x200000a8
 8001290:	200000a0 	.word	0x200000a0
 8001294:	08005ac8 	.word	0x08005ac8
 8001298:	200002a8 	.word	0x200002a8
 800129c:	08005ad8 	.word	0x08005ad8
 80012a0:	08005afc 	.word	0x08005afc
 80012a4:	08005b1c 	.word	0x08005b1c
 80012a8:	08005b30 	.word	0x08005b30
 80012ac:	08005b40 	.word	0x08005b40
 80012b0:	08005b58 	.word	0x08005b58
 80012b4:	08005b70 	.word	0x08005b70
 80012b8:	08005b84 	.word	0x08005b84
 80012bc:	08005b9c 	.word	0x08005b9c

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0b8      	sub	sp, #224	; 0xe0
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ca:	2234      	movs	r2, #52	; 0x34
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 ff2e 	bl	8005130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2290      	movs	r2, #144	; 0x90
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 ff1f 	bl	8005130 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <SystemClock_Config+0x118>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <SystemClock_Config+0x118>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <SystemClock_Config+0x118>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <SystemClock_Config+0x11c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a33      	ldr	r2, [pc, #204]	; (80013dc <SystemClock_Config+0x11c>)
 8001310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <SystemClock_Config+0x11c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	2301      	movs	r3, #1
 800132a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132e:	2310      	movs	r3, #16
 8001330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001340:	2308      	movs	r3, #8
 8001342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001346:	23d8      	movs	r3, #216	; 0xd8
 8001348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800135c:	4618      	mov	r0, r3
 800135e:	f000 feeb 	bl	8002138 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001368:	f000 f83a 	bl	80013e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800136c:	f000 fe94 	bl	8002098 <HAL_PWREx_EnableOverDrive>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001376:	f000 f833 	bl	80013e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800138c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800139c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013a0:	2107      	movs	r1, #7
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 f976 	bl	8002694 <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013ae:	f000 f817 	bl	80013e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fb67 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80013cc:	f000 f808 	bl	80013e0 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	37e0      	adds	r7, #224	; 0xe0
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_SPI2_Init+0x74>)
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <MX_SPI2_Init+0x78>)
 80013f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_SPI2_Init+0x74>)
 80013f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_SPI2_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_SPI2_Init+0x74>)
 8001406:	f44f 7240 	mov.w	r2, #768	; 0x300
 800140a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_SPI2_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_SPI2_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_SPI2_Init+0x74>)
 800141a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_SPI2_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_SPI2_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_SPI2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_SPI2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_SPI2_Init+0x74>)
 800143a:	2207      	movs	r2, #7
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_SPI2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_SPI2_Init+0x74>)
 8001446:	2208      	movs	r2, #8
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_SPI2_Init+0x74>)
 800144c:	f001 ff4a 	bl	80032e4 <HAL_SPI_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001456:	f7ff ffc3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000424 	.word	0x20000424
 8001464:	40003800 	.word	0x40003800

08001468 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a25      	ldr	r2, [pc, #148]	; (800151c <HAL_SPI_MspInit+0xb4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d143      	bne.n	8001512 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a24      	ldr	r2, [pc, #144]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_SPI_MspInit+0xb8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014d2:	230c      	movs	r3, #12
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e2:	2305      	movs	r3, #5
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <HAL_SPI_MspInit+0xbc>)
 80014ee:	f000 fbf5 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f2:	2308      	movs	r3, #8
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001502:	2305      	movs	r3, #5
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4806      	ldr	r0, [pc, #24]	; (8001528 <HAL_SPI_MspInit+0xc0>)
 800150e:	f000 fbe5 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40003800 	.word	0x40003800
 8001520:	40023800 	.word	0x40023800
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f9a4 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <USART3_IRQHandler+0x10>)
 80015ce:	f002 fd07 	bl	8003fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000488 	.word	0x20000488

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f003 fd58 	bl	80050c0 <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20080000 	.word	0x20080000
 800163c:	00000400 	.word	0x00000400
 8001640:	2000008c 	.word	0x2000008c
 8001644:	20000620 	.word	0x20000620

08001648 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <MX_USART3_UART_Init+0x5c>)
 8001674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART3_UART_Init+0x58>)
 80016b0:	f002 fbda 	bl	8003e68 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016ba:	f7ff fe91 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000488 	.word	0x20000488
 80016c8:	40004800 	.word	0x40004800

080016cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_UART_MspInit+0x8c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d130      	bne.n	8001750 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_UART_MspInit+0x90>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a1a      	ldr	r2, [pc, #104]	; (800175c <HAL_UART_MspInit+0x90>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_UART_MspInit+0x90>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0x90>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_UART_MspInit+0x90>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_UART_MspInit+0x90>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800171e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001730:	2307      	movs	r3, #7
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <HAL_UART_MspInit+0x94>)
 800173c:	f000 face 	bl	8001cdc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2027      	movs	r0, #39	; 0x27
 8001746:	f000 fa00 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800174a:	2027      	movs	r0, #39	; 0x27
 800174c:	f000 fa19 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004800 	.word	0x40004800
 800175c:	40023800 	.word	0x40023800
 8001760:	40020c00 	.word	0x40020c00

08001764 <UART_Transmit>:
{
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&Rx_Buffer[Rx_index], 1);
}

void UART_Transmit(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)&Tx_Buffer[Tx_index], 1);
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <UART_Transmit+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <UART_Transmit+0x24>)
 8001772:	4413      	add	r3, r2
 8001774:	2201      	movs	r2, #1
 8001776:	4619      	mov	r1, r3
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <UART_Transmit+0x28>)
 800177a:	f002 fbc3 	bl	8003f04 <HAL_UART_Transmit_IT>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000090 	.word	0x20000090
 8001788:	2000050c 	.word	0x2000050c
 800178c:	20000488 	.word	0x20000488

08001790 <HAL_UART_TxCpltCallback>:
	}
}

//implementation of UART ISR
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) //current UART?
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_UART_TxCpltCallback+0x58>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d11e      	bne.n	80017e0 <HAL_UART_TxCpltCallback+0x50>
	{
		if(Tx_transmitting_str == 0) 			// Transmitting a single char
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_UART_TxCpltCallback+0x5c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d018      	beq.n	80017de <HAL_UART_TxCpltCallback+0x4e>
			return;

		if(Tx_Buffer[Tx_index + 1] == 0)	// Is this the last caracter sent?
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_UART_TxCpltCallback+0x60>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_UART_TxCpltCallback+0x64>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d106      	bne.n	80017ca <HAL_UART_TxCpltCallback+0x3a>
		{
			Tx_transmitting_str = 0;	// end of transmission
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_UART_TxCpltCallback+0x5c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
			Tx_index = 0; 						// prepare for next transmission
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_UART_TxCpltCallback+0x60>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e00a      	b.n	80017e0 <HAL_UART_TxCpltCallback+0x50>
		}
		else
		{
			// print next char in Tx_Buffer
			Tx_index++;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_UART_TxCpltCallback+0x60>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_UART_TxCpltCallback+0x60>)
 80017d6:	701a      	strb	r2, [r3, #0]
			UART_Transmit();
 80017d8:	f7ff ffc4 	bl	8001764 <UART_Transmit>
 80017dc:	e000      	b.n	80017e0 <HAL_UART_TxCpltCallback+0x50>
			return;
 80017de:	bf00      	nop
		}
	}
}
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40004800 	.word	0x40004800
 80017ec:	20000091 	.word	0x20000091
 80017f0:	20000090 	.word	0x20000090
 80017f4:	2000050c 	.word	0x2000050c

080017f8 <UART_puts>:
	// Transmitting a single char
	UART_Transmit();
}

void UART_puts(const char *s)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	if((s == NULL) || (s[0] == 0)) // maybe in this application its not necessary
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d013      	beq.n	800182e <UART_puts+0x36>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00f      	beq.n	800182e <UART_puts+0x36>
		return;

	while(Tx_transmitting_str)// while Tx is busy
 800180e:	bf00      	nop
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <UART_puts+0x40>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1fa      	bne.n	8001810 <UART_puts+0x18>
		;

	strcpy(Tx_Buffer, s);
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <UART_puts+0x44>)
 800181e:	f003 fce3 	bl	80051e8 <strcpy>
	Tx_transmitting_str = 1; // begin Tx_Buffer transmission
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <UART_puts+0x40>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
	UART_Transmit();
 8001828:	f7ff ff9c 	bl	8001764 <UART_Transmit>
 800182c:	e000      	b.n	8001830 <UART_puts+0x38>
		return;
 800182e:	bf00      	nop
}
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000091 	.word	0x20000091
 800183c:	2000050c 	.word	0x2000050c

08001840 <Reset_Handler>:
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0x12>
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopFillZerobss+0x1a>)
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopFillZerobss+0x1e>)
 800184a:	2300      	movs	r3, #0
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:
 800184e:	58d4      	ldr	r4, [r2, r3]
 8001850:	50c4      	str	r4, [r0, r3]
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:
 8001854:	18c4      	adds	r4, r0, r3
 8001856:	428c      	cmp	r4, r1
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopFillZerobss+0x22>)
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopFillZerobss+0x26>)
 800185e:	2300      	movs	r3, #0
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:
 8001866:	42a2      	cmp	r2, r4
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>
 800186a:	f7ff feed 	bl	8001648 <SystemInit>
 800186e:	f003 fc2d 	bl	80050cc <__libc_init_array>
 8001872:	f7ff fb85 	bl	8000f80 <main>
 8001876:	4770      	bx	lr
 8001878:	20080000 	.word	0x20080000
 800187c:	20000000 	.word	0x20000000
 8001880:	20000070 	.word	0x20000070
 8001884:	08005c30 	.word	0x08005c30
 8001888:	20000070 	.word	0x20000070
 800188c:	20000620 	.word	0x20000620

08001890 <ADC_IRQHandler>:
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>

08001892 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001896:	2003      	movs	r0, #3
 8001898:	f000 f94c 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189c:	2000      	movs	r0, #0
 800189e:	f000 f805 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a2:	f7ff fe43 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f967 	bl	8001b9e <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f92f 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000008 	.word	0x20000008
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	2000060c 	.word	0x2000060c

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2000060c 	.word	0x2000060c

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00
 80019d8:	05fa0000 	.word	0x05fa0000

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff8e 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff29 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff3e 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff8e 	bl	8001a88 <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5d 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff31 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff feb6 	bl	8001934 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d008      	beq.n	8001be8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e052      	b.n	8001c8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0216 	bic.w	r2, r2, #22
 8001bf6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d103      	bne.n	8001c18 <HAL_DMA_Abort+0x62>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0208 	bic.w	r2, r2, #8
 8001c26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c38:	e013      	b.n	8001c62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3a:	f7ff fe7b 	bl	8001934 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d90c      	bls.n	8001c62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2203      	movs	r2, #3
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e015      	b.n	8001c8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e4      	bne.n	8001c3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	223f      	movs	r2, #63	; 0x3f
 8001c76:	409a      	lsls	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e00c      	b.n	8001cce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e175      	b.n	8001fe8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8164 	bne.w	8001fe2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d005      	beq.n	8001d32 <HAL_GPIO_Init+0x56>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d017      	beq.n	8001dd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d123      	bne.n	8001e24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80be 	beq.w	8001fe2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a65      	ldr	r2, [pc, #404]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b63      	ldr	r3, [pc, #396]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e7e:	4a61      	ldr	r2, [pc, #388]	; (8002004 <HAL_GPIO_Init+0x328>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_GPIO_Init+0x32c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d037      	beq.n	8001f1a <HAL_GPIO_Init+0x23e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a57      	ldr	r2, [pc, #348]	; (800200c <HAL_GPIO_Init+0x330>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_GPIO_Init+0x23a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a56      	ldr	r2, [pc, #344]	; (8002010 <HAL_GPIO_Init+0x334>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <HAL_GPIO_Init+0x236>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a55      	ldr	r2, [pc, #340]	; (8002014 <HAL_GPIO_Init+0x338>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x232>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a54      	ldr	r2, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x33c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x22e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a53      	ldr	r2, [pc, #332]	; (800201c <HAL_GPIO_Init+0x340>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x22a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	; (8002020 <HAL_GPIO_Init+0x344>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x226>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a51      	ldr	r2, [pc, #324]	; (8002024 <HAL_GPIO_Init+0x348>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x222>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a50      	ldr	r2, [pc, #320]	; (8002028 <HAL_GPIO_Init+0x34c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x21e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4f      	ldr	r2, [pc, #316]	; (800202c <HAL_GPIO_Init+0x350>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x21a>
 8001ef2:	2309      	movs	r3, #9
 8001ef4:	e012      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	e010      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001efa:	2308      	movs	r3, #8
 8001efc:	e00e      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e00c      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f02:	2306      	movs	r3, #6
 8001f04:	e00a      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f06:	2305      	movs	r3, #5
 8001f08:	e008      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f2c:	4935      	ldr	r1, [pc, #212]	; (8002004 <HAL_GPIO_Init+0x328>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a34      	ldr	r2, [pc, #208]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8e:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	; (8002030 <HAL_GPIO_Init+0x354>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	f67f ae86 	bls.w	8001cfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40013800 	.word	0x40013800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40021400 	.word	0x40021400
 8002020:	40021800 	.word	0x40021800
 8002024:	40021c00 	.word	0x40021c00
 8002028:	40022000 	.word	0x40022000
 800202c:	40022400 	.word	0x40022400
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c6:	f7ff fc35 	bl	8001934 <HAL_GetTick>
 80020ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020cc:	e009      	b.n	80020e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020ce:	f7ff fc31 	bl	8001934 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020dc:	d901      	bls.n	80020e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e022      	b.n	8002128 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d1ee      	bne.n	80020ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fc:	f7ff fc1a 	bl	8001934 <HAL_GetTick>
 8002100:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002102:	e009      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002104:	f7ff fc16 	bl	8001934 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002112:	d901      	bls.n	8002118 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e007      	b.n	8002128 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002124:	d1ee      	bne.n	8002104 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	40007000 	.word	0x40007000

08002138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e29b      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8087 	beq.w	800226a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800215c:	4b96      	ldr	r3, [pc, #600]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b04      	cmp	r3, #4
 8002166:	d00c      	beq.n	8002182 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002168:	4b93      	ldr	r3, [pc, #588]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d112      	bne.n	800219a <HAL_RCC_OscConfig+0x62>
 8002174:	4b90      	ldr	r3, [pc, #576]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002180:	d10b      	bne.n	800219a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002182:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06c      	beq.n	8002268 <HAL_RCC_OscConfig+0x130>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d168      	bne.n	8002268 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e275      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x7a>
 80021a4:	4b84      	ldr	r3, [pc, #528]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a83      	ldr	r2, [pc, #524]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e02e      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x9c>
 80021ba:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7e      	ldr	r2, [pc, #504]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b7c      	ldr	r3, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7b      	ldr	r2, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0xc0>
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a75      	ldr	r2, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021f8:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fb8c 	bl	8001934 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fb88 	bl	8001934 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e229      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xe8>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff fb78 	bl	8001934 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff fb74 	bl	8001934 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e215      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x110>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d069      	beq.n	800234a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x190>
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x17a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1e9      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	493d      	ldr	r1, [pc, #244]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e040      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d023      	beq.n	8002318 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7ff fb2a 	bl	8001934 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff fb26 	bl	8001934 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1c7      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4929      	ldr	r1, [pc, #164]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
 8002316:	e018      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fb06 	bl	8001934 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7ff fb02 	bl	8001934 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1a3      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d038      	beq.n	80023c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d019      	beq.n	8002392 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7ff fae3 	bl	8001934 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002372:	f7ff fadf 	bl	8001934 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e180      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x23a>
 8002390:	e01a      	b.n	80023c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7ff fac9 	bl	8001934 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a6:	f7ff fac5 	bl	8001934 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d903      	bls.n	80023bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e166      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
 80023b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b92      	ldr	r3, [pc, #584]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ee      	bne.n	80023a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a4 	beq.w	800251e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b8c      	ldr	r3, [pc, #560]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a88      	ldr	r2, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b86      	ldr	r3, [pc, #536]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fe:	4b83      	ldr	r3, [pc, #524]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800240a:	4b80      	ldr	r3, [pc, #512]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7f      	ldr	r2, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7ff fa8d 	bl	8001934 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff fa89 	bl	8001934 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e12a      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002430:	4b76      	ldr	r3, [pc, #472]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x31a>
 8002444:	4b70      	ldr	r3, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a6f      	ldr	r2, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
 8002450:	e02d      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x33c>
 800245a:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6713      	str	r3, [r2, #112]	; 0x70
 8002466:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	4a67      	ldr	r2, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6713      	str	r3, [r2, #112]	; 0x70
 8002472:	e01c      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x35e>
 800247c:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a61      	ldr	r2, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	4a5e      	ldr	r2, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	; 0x70
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
 8002496:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a5b      	ldr	r2, [pc, #364]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff fa3d 	bl	8001934 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff fa39 	bl	8001934 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0d8      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCC_OscConfig+0x386>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7ff fa27 	bl	8001934 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7ff fa23 	bl	8001934 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0c2      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	4b41      	ldr	r3, [pc, #260]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a3c      	ldr	r2, [pc, #240]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80ae 	beq.w	8002684 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	4b37      	ldr	r3, [pc, #220]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d06d      	beq.n	8002610 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d14b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a31      	ldr	r2, [pc, #196]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7ff f9f4 	bl	8001934 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff f9f0 	bl	8001934 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e091      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	491b      	ldr	r1, [pc, #108]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f9c2 	bl	8001934 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff f9be 	bl	8001934 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e05f      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x47c>
 80025d2:	e057      	b.n	8002684 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff f9a8 	bl	8001934 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff f9a4 	bl	8001934 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e045      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4b0>
 8002606:	e03d      	b.n	8002684 <HAL_RCC_OscConfig+0x54c>
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_RCC_OscConfig+0x558>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d030      	beq.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d129      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d122      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002646:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002648:	4293      	cmp	r3, r2
 800264a:	d119      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	3b01      	subs	r3, #1
 800265a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d10f      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d107      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0d0      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ac:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d910      	bls.n	80026dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b67      	ldr	r3, [pc, #412]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 020f 	bic.w	r2, r3, #15
 80026c2:	4965      	ldr	r1, [pc, #404]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0b8      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80026fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002716:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	494d      	ldr	r1, [pc, #308]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d040      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e07f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e073      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e06b      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002776:	4b39      	ldr	r3, [pc, #228]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4936      	ldr	r1, [pc, #216]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7ff f8d4 	bl	8001934 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7ff f8d0 	bl	8001934 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e053      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 020c 	and.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1eb      	bne.n	8002790 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d210      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 020f 	bic.w	r2, r3, #15
 80027ce:	4922      	ldr	r1, [pc, #136]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e032      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4916      	ldr	r1, [pc, #88]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	490e      	ldr	r1, [pc, #56]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002826:	f000 f821 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800282a:	4602      	mov	r2, r0
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	490a      	ldr	r1, [pc, #40]	; (8002860 <HAL_RCC_ClockConfig+0x1cc>)
 8002838:	5ccb      	ldrb	r3, [r1, r3]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x1d0>)
 8002840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1d4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f830 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023c00 	.word	0x40023c00
 800285c:	40023800 	.word	0x40023800
 8002860:	08005bd4 	.word	0x08005bd4
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800286c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002884:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d00d      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x40>
 8002890:	2b08      	cmp	r3, #8
 8002892:	f200 80bd 	bhi.w	8002a10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x34>
 800289a:	2b04      	cmp	r3, #4
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800289e:	e0b7      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028a2:	60bb      	str	r3, [r7, #8]
      break;
 80028a4:	e0b7      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a6:	4b60      	ldr	r3, [pc, #384]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028a8:	60bb      	str	r3, [r7, #8]
      break;
 80028aa:	e0b4      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04d      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	461a      	mov	r2, r3
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	ea02 0800 	and.w	r8, r2, r0
 80028da:	ea03 0901 	and.w	r9, r3, r1
 80028de:	4640      	mov	r0, r8
 80028e0:	4649      	mov	r1, r9
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	014b      	lsls	r3, r1, #5
 80028ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028f0:	0142      	lsls	r2, r0, #5
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	ebb0 0008 	subs.w	r0, r0, r8
 80028fa:	eb61 0109 	sbc.w	r1, r1, r9
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	018b      	lsls	r3, r1, #6
 8002908:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800290c:	0182      	lsls	r2, r0, #6
 800290e:	1a12      	subs	r2, r2, r0
 8002910:	eb63 0301 	sbc.w	r3, r3, r1
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	00d9      	lsls	r1, r3, #3
 800291e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002922:	00d0      	lsls	r0, r2, #3
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	eb12 0208 	adds.w	r2, r2, r8
 800292c:	eb43 0309 	adc.w	r3, r3, r9
 8002930:	f04f 0000 	mov.w	r0, #0
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	0299      	lsls	r1, r3, #10
 800293a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800293e:	0290      	lsls	r0, r2, #10
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	f7fd fcc6 	bl	80002e0 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e04a      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	461a      	mov	r2, r3
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	ea02 0400 	and.w	r4, r2, r0
 8002976:	ea03 0501 	and.w	r5, r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	014b      	lsls	r3, r1, #5
 8002988:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800298c:	0142      	lsls	r2, r0, #5
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	1b00      	subs	r0, r0, r4
 8002994:	eb61 0105 	sbc.w	r1, r1, r5
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	018b      	lsls	r3, r1, #6
 80029a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029a6:	0182      	lsls	r2, r0, #6
 80029a8:	1a12      	subs	r2, r2, r0
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	00d9      	lsls	r1, r3, #3
 80029b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029bc:	00d0      	lsls	r0, r2, #3
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	1912      	adds	r2, r2, r4
 80029c4:	eb45 0303 	adc.w	r3, r5, r3
 80029c8:	f04f 0000 	mov.w	r0, #0
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	0299      	lsls	r1, r3, #10
 80029d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029d6:	0290      	lsls	r0, r2, #10
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f7fd fc7a 	bl	80002e0 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	60bb      	str	r3, [r7, #8]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a12:	60bb      	str	r3, [r7, #8]
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	68bb      	ldr	r3, [r7, #8]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	00f42400 	.word	0x00f42400

08002a2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4903      	ldr	r1, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08005be4 	.word	0x08005be4

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a70:	f7ff ffdc 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08005be4 	.word	0x08005be4

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002abc:	4b69      	ldr	r3, [pc, #420]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a68      	ldr	r2, [pc, #416]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ac6:	6093      	str	r3, [r2, #8]
 8002ac8:	4b66      	ldr	r3, [pc, #408]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	4964      	ldr	r1, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d017      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	4959      	ldr	r1, [pc, #356]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d017      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	494a      	ldr	r1, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808b 	beq.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a39      	ldr	r2, [pc, #228]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe feca 	bl	8001934 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fe fec6 	bl	8001934 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e38f      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d035      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d02e      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d114      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fe8e 	bl	8001934 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fe8a 	bl	8001934 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e351      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	4901      	ldr	r1, [pc, #4]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	0ffffcff 	.word	0x0ffffcff
 8002c70:	4bb3      	ldr	r3, [pc, #716]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4ab2      	ldr	r2, [pc, #712]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c7a:	6093      	str	r3, [r2, #8]
 8002c7c:	4bb0      	ldr	r3, [pc, #704]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	49ad      	ldr	r1, [pc, #692]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c9a:	4ba9      	ldr	r3, [pc, #676]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca0:	4aa7      	ldr	r2, [pc, #668]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002caa:	4ba5      	ldr	r3, [pc, #660]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	49a2      	ldr	r1, [pc, #648]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc8:	4b9d      	ldr	r3, [pc, #628]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd6:	499a      	ldr	r1, [pc, #616]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cea:	4b95      	ldr	r3, [pc, #596]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf8:	4991      	ldr	r1, [pc, #580]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	4989      	ldr	r1, [pc, #548]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4980      	ldr	r1, [pc, #512]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d50:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4978      	ldr	r1, [pc, #480]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f023 020c 	bic.w	r2, r3, #12
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	496f      	ldr	r1, [pc, #444]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	4967      	ldr	r1, [pc, #412]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002db6:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	495e      	ldr	r1, [pc, #376]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	4956      	ldr	r1, [pc, #344]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	4945      	ldr	r1, [pc, #276]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e3e:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4c:	493c      	ldr	r1, [pc, #240]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e60:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d011      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	492b      	ldr	r1, [pc, #172]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	491b      	ldr	r1, [pc, #108]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f18:	4909      	ldr	r1, [pc, #36]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	4986      	ldr	r1, [pc, #536]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f58:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f68:	497d      	ldr	r1, [pc, #500]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d006      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80d6 	beq.w	8003130 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f84:	4b76      	ldr	r3, [pc, #472]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a75      	ldr	r2, [pc, #468]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe fcd0 	bl	8001934 <HAL_GetTick>
 8002f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f98:	f7fe fccc 	bl	8001934 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e195      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002faa:	4b6d      	ldr	r3, [pc, #436]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d021      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11d      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fd8:	4b61      	ldr	r3, [pc, #388]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	0e1b      	lsrs	r3, r3, #24
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	019a      	lsls	r2, r3, #6
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	071b      	lsls	r3, r3, #28
 8002ffe:	4958      	ldr	r1, [pc, #352]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02e      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003030:	d129      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003032:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003040:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	0f1b      	lsrs	r3, r3, #28
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	019a      	lsls	r2, r3, #6
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	493e      	ldr	r1, [pc, #248]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800306e:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003074:	f023 021f 	bic.w	r2, r3, #31
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	3b01      	subs	r3, #1
 800307e:	4938      	ldr	r1, [pc, #224]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01d      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003098:	0e1b      	lsrs	r3, r3, #24
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a0:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a6:	0f1b      	lsrs	r3, r3, #28
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	019a      	lsls	r2, r3, #6
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	061b      	lsls	r3, r3, #24
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	071b      	lsls	r3, r3, #28
 80030c6:	4926      	ldr	r1, [pc, #152]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d011      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	019a      	lsls	r2, r3, #6
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	071b      	lsls	r3, r3, #28
 80030f6:	491a      	ldr	r1, [pc, #104]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310a:	f7fe fc13 	bl	8001934 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003112:	f7fe fc0f 	bl	8001934 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b64      	cmp	r3, #100	; 0x64
 800311e:	d901      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0d8      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 80ce 	bne.w	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fe fbf6 	bl	8001934 <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800314a:	e00b      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800314c:	f7fe fbf2 	bl	8001934 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d904      	bls.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e0bb      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003164:	4b5e      	ldr	r3, [pc, #376]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003170:	d0ec      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02e      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800319a:	4b51      	ldr	r3, [pc, #324]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031a8:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	0f1b      	lsrs	r3, r3, #28
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	019a      	lsls	r2, r3, #6
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	061b      	lsls	r3, r3, #24
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	071b      	lsls	r3, r3, #28
 80031ce:	4944      	ldr	r1, [pc, #272]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031d6:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	493d      	ldr	r1, [pc, #244]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003204:	d11d      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	0e1b      	lsrs	r3, r3, #24
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003214:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	0f1b      	lsrs	r3, r3, #28
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	019a      	lsls	r2, r3, #6
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	071b      	lsls	r3, r3, #28
 800323a:	4929      	ldr	r1, [pc, #164]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d028      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	0e1b      	lsrs	r3, r3, #24
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	019a      	lsls	r2, r3, #6
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	4917      	ldr	r1, [pc, #92]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	4911      	ldr	r1, [pc, #68]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ac:	f7fe fb42 	bl	8001934 <HAL_GetTick>
 80032b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b4:	f7fe fb3e 	bl	8001934 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e007      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d2:	d1ef      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e09d      	b.n	8003432 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003306:	d009      	beq.n	800331c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
 800330e:	e005      	b.n	800331c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe f896 	bl	8001468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003352:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800335c:	d902      	bls.n	8003364 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e002      	b.n	800336a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003368:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003372:	d007      	beq.n	8003384 <HAL_SPI_Init+0xa0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	ea42 0103 	orr.w	r1, r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	f003 0204 	and.w	r2, r3, #4
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003400:	ea42 0103 	orr.w	r1, r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_SPI_Transmit+0x22>
 8003458:	2302      	movs	r3, #2
 800345a:	e158      	b.n	800370e <HAL_SPI_Transmit+0x2d4>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003464:	f7fe fa66 	bl	8001934 <HAL_GetTick>
 8003468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d002      	beq.n	8003480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800347e:	e13d      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SPI_Transmit+0x52>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003490:	e134      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d10f      	bne.n	80034fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d007      	beq.n	800351c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003524:	d94b      	bls.n	80035be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0xfa>
 800352e:	8afb      	ldrh	r3, [r7, #22]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d13e      	bne.n	80035b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003558:	e02b      	b.n	80035b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d112      	bne.n	800358e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800358c:	e011      	b.n	80035b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358e:	f7fe f9d1 	bl	8001934 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d803      	bhi.n	80035a6 <HAL_SPI_Transmit+0x16c>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_Transmit+0x172>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b0:	e0a4      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ce      	bne.n	800355a <HAL_SPI_Transmit+0x120>
 80035bc:	e07c      	b.n	80036b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Transmit+0x192>
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d170      	bne.n	80036ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d912      	bls.n	80035fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b02      	subs	r3, #2
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035fa:	e058      	b.n	80036ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003622:	e044      	b.n	80036ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d12b      	bne.n	800368a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d912      	bls.n	8003662 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	881a      	ldrh	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	1c9a      	adds	r2, r3, #2
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b02      	subs	r3, #2
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003660:	e025      	b.n	80036ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003688:	e011      	b.n	80036ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368a:	f7fe f953 	bl	8001934 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d803      	bhi.n	80036a2 <HAL_SPI_Transmit+0x268>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_Transmit+0x26e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036ac:	e026      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1b5      	bne.n	8003624 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fb69 	bl	8003d94 <SPI_EndRxTxTransaction>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e000      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80036fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800370c:	7ffb      	ldrb	r3, [r7, #31]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b08a      	sub	sp, #40	; 0x28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003724:	2301      	movs	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_SPI_TransmitReceive+0x26>
 8003738:	2302      	movs	r3, #2
 800373a:	e1fb      	b.n	8003b34 <HAL_SPI_TransmitReceive+0x41e>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003744:	f7fe f8f6 	bl	8001934 <HAL_GetTick>
 8003748:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003750:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003760:	7efb      	ldrb	r3, [r7, #27]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d00e      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x6e>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376c:	d106      	bne.n	800377c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_SPI_TransmitReceive+0x66>
 8003776:	7efb      	ldrb	r3, [r7, #27]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d003      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003782:	e1cd      	b.n	8003b20 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x80>
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800379c:	e1c0      	b.n	8003b20 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d003      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2205      	movs	r2, #5
 80037ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	887a      	ldrh	r2, [r7, #2]
 80037de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037f4:	d802      	bhi.n	80037fc <HAL_SPI_TransmitReceive+0xe6>
 80037f6:	8a3b      	ldrh	r3, [r7, #16]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d908      	bls.n	800380e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	e007      	b.n	800381e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800381c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d007      	beq.n	800383c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003844:	d97c      	bls.n	8003940 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x13e>
 800384e:	8a7b      	ldrh	r3, [r7, #18]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d169      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003878:	e056      	b.n	8003928 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b02      	cmp	r3, #2
 8003886:	d11b      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d016      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	2b01      	cmp	r3, #1
 8003896:	d113      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d11c      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x1f2>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	b292      	uxth	r2, r2
 80038e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003904:	2301      	movs	r3, #1
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003908:	f7fe f814 	bl	8001934 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003914:	429a      	cmp	r2, r3
 8003916:	d807      	bhi.n	8003928 <HAL_SPI_TransmitReceive+0x212>
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d003      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003926:	e0fb      	b.n	8003b20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1a3      	bne.n	800387a <HAL_SPI_TransmitReceive+0x164>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d19d      	bne.n	800387a <HAL_SPI_TransmitReceive+0x164>
 800393e:	e0df      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x23a>
 8003948:	8a7b      	ldrh	r3, [r7, #18]
 800394a:	2b01      	cmp	r3, #1
 800394c:	f040 80cb 	bne.w	8003ae6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d912      	bls.n	8003980 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	881a      	ldrh	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	1c9a      	adds	r2, r3, #2
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b02      	subs	r3, #2
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800397e:	e0b2      	b.n	8003ae6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	7812      	ldrb	r2, [r2, #0]
 800398c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a6:	e09e      	b.n	8003ae6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d134      	bne.n	8003a20 <HAL_SPI_TransmitReceive+0x30a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02f      	beq.n	8003a20 <HAL_SPI_TransmitReceive+0x30a>
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d12c      	bne.n	8003a20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d912      	bls.n	80039f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	881a      	ldrh	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b02      	subs	r3, #2
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039f4:	e012      	b.n	8003a1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d148      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x3aa>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d042      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d923      	bls.n	8003a8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	b292      	uxth	r2, r2
 8003a52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b02      	subs	r3, #2
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d81f      	bhi.n	8003abc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	e016      	b.n	8003abc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f103 020c 	add.w	r2, r3, #12
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ac0:	f7fd ff38 	bl	8001934 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d803      	bhi.n	8003ad8 <HAL_SPI_TransmitReceive+0x3c2>
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x3c8>
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ae4:	e01c      	b.n	8003b20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f47f af5b 	bne.w	80039a8 <HAL_SPI_TransmitReceive+0x292>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f47f af54 	bne.w	80039a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f945 	bl	8003d94 <SPI_EndRxTxTransaction>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60
 8003b1c:	e000      	b.n	8003b20 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003b1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3728      	adds	r7, #40	; 0x28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b4a:	b2db      	uxtb	r3, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b68:	f7fd fee4 	bl	8001934 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b78:	f7fd fedc 	bl	8001934 <HAL_GetTick>
 8003b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	015b      	lsls	r3, r3, #5
 8003b84:	0d1b      	lsrs	r3, r3, #20
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	e054      	b.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d050      	beq.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b98:	f7fd fecc 	bl	8001934 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d902      	bls.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d13d      	bne.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc6:	d111      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd0:	d004      	beq.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d107      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf4:	d10f      	bne.n	8003c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e017      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d19b      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c7a:	f7fd fe5b 	bl	8001934 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c8a:	f7fd fe53 	bl	8001934 <HAL_GetTick>
 8003c8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c98:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00da      	lsls	r2, r3, #3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	0d1b      	lsrs	r3, r3, #20
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cb0:	e060      	b.n	8003d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003cb8:	d107      	bne.n	8003cca <SPI_WaitFifoStateUntilTimeout+0x62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d050      	beq.n	8003d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cd2:	f7fd fe2f 	bl	8001934 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d902      	bls.n	8003ce8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d13d      	bne.n	8003d64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d00:	d111      	bne.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0a:	d004      	beq.n	8003d16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d107      	bne.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2e:	d10f      	bne.n	8003d50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e010      	b.n	8003d86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d196      	bne.n	8003cb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3728      	adds	r7, #40	; 0x28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff ff5b 	bl	8003c68 <SPI_WaitFifoStateUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e046      	b.n	8003e56 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <SPI_EndRxTxTransaction+0xcc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a25      	ldr	r2, [pc, #148]	; (8003e64 <SPI_EndRxTxTransaction+0xd0>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0d5b      	lsrs	r3, r3, #21
 8003dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de6:	d112      	bne.n	8003e0e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff feb0 	bl	8003b58 <SPI_WaitFlagStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e023      	b.n	8003e56 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d0f2      	beq.n	8003e0e <SPI_EndRxTxTransaction+0x7a>
 8003e28:	e000      	b.n	8003e2c <SPI_EndRxTxTransaction+0x98>
        break;
 8003e2a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ff15 	bl	8003c68 <SPI_WaitFifoStateUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e000      	b.n	8003e56 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000000 	.word	0x20000000
 8003e64:	165e9f81 	.word	0x165e9f81

08003e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e040      	b.n	8003efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fc1e 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fb9a 	bl	80045e0 <UART_SetConfig>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e022      	b.n	8003efc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fdf0 	bl	8004aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fe77 	bl	8004be8 <UART_CheckIdleState>
 8003efa:	4603      	mov	r3, r0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b08b      	sub	sp, #44	; 0x2c
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d156      	bne.n	8003fc8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_UART_Transmit_IT+0x22>
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e04f      	b.n	8003fca <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Transmit_IT+0x34>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e048      	b.n	8003fca <HAL_UART_Transmit_IT+0xc6>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2221      	movs	r2, #33	; 0x21
 8003f68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d107      	bne.n	8003f84 <HAL_UART_Transmit_IT+0x80>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_UART_Transmit_IT+0xd4>)
 8003f80:	669a      	str	r2, [r3, #104]	; 0x68
 8003f82:	e002      	b.n	8003f8a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <HAL_UART_Transmit_IT+0xd8>)
 8003f88:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e6      	bne.n	8003f92 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	372c      	adds	r7, #44	; 0x2c
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	08004fab 	.word	0x08004fab
 8003fdc:	08004ef5 	.word	0x08004ef5

08003fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b0ba      	sub	sp, #232	; 0xe8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800400a:	f640 030f 	movw	r3, #2063	; 0x80f
 800400e:	4013      	ands	r3, r2
 8004010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800401c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00f      	beq.n	8004048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 82a4 	beq.w	8004586 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
      }
      return;
 8004046:	e29e      	b.n	8004586 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8117 	beq.w	8004280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800405e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004062:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_UART_IRQHandler+0x298>)
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 810a 	beq.w	8004280 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d011      	beq.n	800409c <HAL_UART_IRQHandler+0xbc>
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2201      	movs	r2, #1
 800408a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d011      	beq.n	80040cc <HAL_UART_IRQHandler+0xec>
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d011      	beq.n	80040fc <HAL_UART_IRQHandler+0x11c>
 80040d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2204      	movs	r2, #4
 80040ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f2:	f043 0202 	orr.w	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412e:	f043 0208 	orr.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d012      	beq.n	800416a <HAL_UART_IRQHandler+0x18a>
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 820a 	beq.w	800458a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04f      	beq.n	8004262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fe1d 	bl	8004e02 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d141      	bne.n	800425a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800420e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800421a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1d9      	bne.n	80041d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <HAL_UART_IRQHandler+0x29c>)
 8004230:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd fd2d 	bl	8001c96 <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800424c:	4610      	mov	r0, r2
 800424e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e00f      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9a4 	bl	80045a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	e00b      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9a0 	bl	80045a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e007      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f99c 	bl	80045a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004270:	e18b      	b.n	800458a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004272:	bf00      	nop
    return;
 8004274:	e189      	b.n	800458a <HAL_UART_IRQHandler+0x5aa>
 8004276:	bf00      	nop
 8004278:	04000120 	.word	0x04000120
 800427c:	08004ec9 	.word	0x08004ec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 8144 	bne.w	8004512 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 813d 	beq.w	8004512 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8136 	beq.w	8004512 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2210      	movs	r2, #16
 80042ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	f040 80b2 	bne.w	8004422 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 815d 	beq.w	800458e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042de:	429a      	cmp	r2, r3
 80042e0:	f080 8155 	bcs.w	800458e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f8:	f000 8085 	beq.w	8004406 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800432a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800433e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1da      	bne.n	80042fc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800436a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800436e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800437c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e1      	bne.n	8004346 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3308      	adds	r3, #8
 8004388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e3      	bne.n	8004382 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e4      	bne.n	80043c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4618      	mov	r0, r3
 8004402:	f7fd fbd8 	bl	8001bb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004412:	b29b      	uxth	r3, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8ca 	bl	80045b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004420:	e0b5      	b.n	800458e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800442e:	b29b      	uxth	r3, r3
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80a7 	beq.w	8004592 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80a2 	beq.w	8004592 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004470:	647b      	str	r3, [r7, #68]	; 0x44
 8004472:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e4      	bne.n	800444e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3308      	adds	r3, #8
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	623b      	str	r3, [r7, #32]
   return(result);
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044a8:	633a      	str	r2, [r7, #48]	; 0x30
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e3      	bne.n	8004484 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60fb      	str	r3, [r7, #12]
   return(result);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0310 	bic.w	r3, r3, #16
 80044e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	617b      	str	r3, [r7, #20]
   return(result);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e4      	bne.n	80044ce <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f852 	bl	80045b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004510:	e03f      	b.n	8004592 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00e      	beq.n	800453c <HAL_UART_IRQHandler+0x55c>
 800451e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f849 	bl	80045cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800453a:	e02d      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
    }
    return;
 8004564:	e017      	b.n	8004596 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d012      	beq.n	8004598 <HAL_UART_IRQHandler+0x5b8>
 8004572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fd73 	bl	800506a <UART_EndTransmit_IT>
    return;
 8004584:	e008      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004586:	bf00      	nop
 8004588:	e006      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
    return;
 800458a:	bf00      	nop
 800458c:	e004      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
      return;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004596:	bf00      	nop
  }

}
 8004598:	37e8      	adds	r7, #232	; 0xe8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop

080045a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4ba7      	ldr	r3, [pc, #668]	; (80048a8 <UART_SetConfig+0x2c8>)
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	430b      	orrs	r3, r1
 8004616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	430a      	orrs	r2, r1
 8004650:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a95      	ldr	r2, [pc, #596]	; (80048ac <UART_SetConfig+0x2cc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d120      	bne.n	800469e <UART_SetConfig+0xbe>
 800465c:	4b94      	ldr	r3, [pc, #592]	; (80048b0 <UART_SetConfig+0x2d0>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b03      	cmp	r3, #3
 8004668:	d816      	bhi.n	8004698 <UART_SetConfig+0xb8>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x90>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004681 	.word	0x08004681
 8004674:	0800468d 	.word	0x0800468d
 8004678:	08004687 	.word	0x08004687
 800467c:	08004693 	.word	0x08004693
 8004680:	2301      	movs	r3, #1
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e14f      	b.n	8004926 <UART_SetConfig+0x346>
 8004686:	2302      	movs	r3, #2
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e14c      	b.n	8004926 <UART_SetConfig+0x346>
 800468c:	2304      	movs	r3, #4
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e149      	b.n	8004926 <UART_SetConfig+0x346>
 8004692:	2308      	movs	r3, #8
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e146      	b.n	8004926 <UART_SetConfig+0x346>
 8004698:	2310      	movs	r3, #16
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e143      	b.n	8004926 <UART_SetConfig+0x346>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a84      	ldr	r2, [pc, #528]	; (80048b4 <UART_SetConfig+0x2d4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d132      	bne.n	800470e <UART_SetConfig+0x12e>
 80046a8:	4b81      	ldr	r3, [pc, #516]	; (80048b0 <UART_SetConfig+0x2d0>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b0c      	cmp	r3, #12
 80046b4:	d828      	bhi.n	8004708 <UART_SetConfig+0x128>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <UART_SetConfig+0xdc>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	08004709 	.word	0x08004709
 80046c4:	08004709 	.word	0x08004709
 80046c8:	08004709 	.word	0x08004709
 80046cc:	080046fd 	.word	0x080046fd
 80046d0:	08004709 	.word	0x08004709
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004709 	.word	0x08004709
 80046dc:	080046f7 	.word	0x080046f7
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004709 	.word	0x08004709
 80046ec:	08004703 	.word	0x08004703
 80046f0:	2300      	movs	r3, #0
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e117      	b.n	8004926 <UART_SetConfig+0x346>
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e114      	b.n	8004926 <UART_SetConfig+0x346>
 80046fc:	2304      	movs	r3, #4
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e111      	b.n	8004926 <UART_SetConfig+0x346>
 8004702:	2308      	movs	r3, #8
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e10e      	b.n	8004926 <UART_SetConfig+0x346>
 8004708:	2310      	movs	r3, #16
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e10b      	b.n	8004926 <UART_SetConfig+0x346>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a69      	ldr	r2, [pc, #420]	; (80048b8 <UART_SetConfig+0x2d8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d120      	bne.n	800475a <UART_SetConfig+0x17a>
 8004718:	4b65      	ldr	r3, [pc, #404]	; (80048b0 <UART_SetConfig+0x2d0>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d013      	beq.n	800474e <UART_SetConfig+0x16e>
 8004726:	2b30      	cmp	r3, #48	; 0x30
 8004728:	d814      	bhi.n	8004754 <UART_SetConfig+0x174>
 800472a:	2b20      	cmp	r3, #32
 800472c:	d009      	beq.n	8004742 <UART_SetConfig+0x162>
 800472e:	2b20      	cmp	r3, #32
 8004730:	d810      	bhi.n	8004754 <UART_SetConfig+0x174>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <UART_SetConfig+0x15c>
 8004736:	2b10      	cmp	r3, #16
 8004738:	d006      	beq.n	8004748 <UART_SetConfig+0x168>
 800473a:	e00b      	b.n	8004754 <UART_SetConfig+0x174>
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e0f1      	b.n	8004926 <UART_SetConfig+0x346>
 8004742:	2302      	movs	r3, #2
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e0ee      	b.n	8004926 <UART_SetConfig+0x346>
 8004748:	2304      	movs	r3, #4
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e0eb      	b.n	8004926 <UART_SetConfig+0x346>
 800474e:	2308      	movs	r3, #8
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e0e8      	b.n	8004926 <UART_SetConfig+0x346>
 8004754:	2310      	movs	r3, #16
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e0e5      	b.n	8004926 <UART_SetConfig+0x346>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a57      	ldr	r2, [pc, #348]	; (80048bc <UART_SetConfig+0x2dc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d120      	bne.n	80047a6 <UART_SetConfig+0x1c6>
 8004764:	4b52      	ldr	r3, [pc, #328]	; (80048b0 <UART_SetConfig+0x2d0>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800476e:	2bc0      	cmp	r3, #192	; 0xc0
 8004770:	d013      	beq.n	800479a <UART_SetConfig+0x1ba>
 8004772:	2bc0      	cmp	r3, #192	; 0xc0
 8004774:	d814      	bhi.n	80047a0 <UART_SetConfig+0x1c0>
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d009      	beq.n	800478e <UART_SetConfig+0x1ae>
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d810      	bhi.n	80047a0 <UART_SetConfig+0x1c0>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <UART_SetConfig+0x1a8>
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d006      	beq.n	8004794 <UART_SetConfig+0x1b4>
 8004786:	e00b      	b.n	80047a0 <UART_SetConfig+0x1c0>
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e0cb      	b.n	8004926 <UART_SetConfig+0x346>
 800478e:	2302      	movs	r3, #2
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e0c8      	b.n	8004926 <UART_SetConfig+0x346>
 8004794:	2304      	movs	r3, #4
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e0c5      	b.n	8004926 <UART_SetConfig+0x346>
 800479a:	2308      	movs	r3, #8
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e0c2      	b.n	8004926 <UART_SetConfig+0x346>
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e0bf      	b.n	8004926 <UART_SetConfig+0x346>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a45      	ldr	r2, [pc, #276]	; (80048c0 <UART_SetConfig+0x2e0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d125      	bne.n	80047fc <UART_SetConfig+0x21c>
 80047b0:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <UART_SetConfig+0x2d0>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d017      	beq.n	80047f0 <UART_SetConfig+0x210>
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c4:	d817      	bhi.n	80047f6 <UART_SetConfig+0x216>
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ca:	d00b      	beq.n	80047e4 <UART_SetConfig+0x204>
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d0:	d811      	bhi.n	80047f6 <UART_SetConfig+0x216>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <UART_SetConfig+0x1fe>
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047da:	d006      	beq.n	80047ea <UART_SetConfig+0x20a>
 80047dc:	e00b      	b.n	80047f6 <UART_SetConfig+0x216>
 80047de:	2300      	movs	r3, #0
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e0a0      	b.n	8004926 <UART_SetConfig+0x346>
 80047e4:	2302      	movs	r3, #2
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e09d      	b.n	8004926 <UART_SetConfig+0x346>
 80047ea:	2304      	movs	r3, #4
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e09a      	b.n	8004926 <UART_SetConfig+0x346>
 80047f0:	2308      	movs	r3, #8
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e097      	b.n	8004926 <UART_SetConfig+0x346>
 80047f6:	2310      	movs	r3, #16
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e094      	b.n	8004926 <UART_SetConfig+0x346>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a30      	ldr	r2, [pc, #192]	; (80048c4 <UART_SetConfig+0x2e4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d125      	bne.n	8004852 <UART_SetConfig+0x272>
 8004806:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <UART_SetConfig+0x2d0>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004814:	d017      	beq.n	8004846 <UART_SetConfig+0x266>
 8004816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800481a:	d817      	bhi.n	800484c <UART_SetConfig+0x26c>
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	d00b      	beq.n	800483a <UART_SetConfig+0x25a>
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d811      	bhi.n	800484c <UART_SetConfig+0x26c>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <UART_SetConfig+0x254>
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d006      	beq.n	8004840 <UART_SetConfig+0x260>
 8004832:	e00b      	b.n	800484c <UART_SetConfig+0x26c>
 8004834:	2301      	movs	r3, #1
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e075      	b.n	8004926 <UART_SetConfig+0x346>
 800483a:	2302      	movs	r3, #2
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e072      	b.n	8004926 <UART_SetConfig+0x346>
 8004840:	2304      	movs	r3, #4
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e06f      	b.n	8004926 <UART_SetConfig+0x346>
 8004846:	2308      	movs	r3, #8
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e06c      	b.n	8004926 <UART_SetConfig+0x346>
 800484c:	2310      	movs	r3, #16
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e069      	b.n	8004926 <UART_SetConfig+0x346>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <UART_SetConfig+0x2e8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d137      	bne.n	80048cc <UART_SetConfig+0x2ec>
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <UART_SetConfig+0x2d0>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800486a:	d017      	beq.n	800489c <UART_SetConfig+0x2bc>
 800486c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004870:	d817      	bhi.n	80048a2 <UART_SetConfig+0x2c2>
 8004872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004876:	d00b      	beq.n	8004890 <UART_SetConfig+0x2b0>
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487c:	d811      	bhi.n	80048a2 <UART_SetConfig+0x2c2>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <UART_SetConfig+0x2aa>
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004886:	d006      	beq.n	8004896 <UART_SetConfig+0x2b6>
 8004888:	e00b      	b.n	80048a2 <UART_SetConfig+0x2c2>
 800488a:	2300      	movs	r3, #0
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e04a      	b.n	8004926 <UART_SetConfig+0x346>
 8004890:	2302      	movs	r3, #2
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e047      	b.n	8004926 <UART_SetConfig+0x346>
 8004896:	2304      	movs	r3, #4
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e044      	b.n	8004926 <UART_SetConfig+0x346>
 800489c:	2308      	movs	r3, #8
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e041      	b.n	8004926 <UART_SetConfig+0x346>
 80048a2:	2310      	movs	r3, #16
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e03e      	b.n	8004926 <UART_SetConfig+0x346>
 80048a8:	efff69f3 	.word	0xefff69f3
 80048ac:	40011000 	.word	0x40011000
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40004400 	.word	0x40004400
 80048b8:	40004800 	.word	0x40004800
 80048bc:	40004c00 	.word	0x40004c00
 80048c0:	40005000 	.word	0x40005000
 80048c4:	40011400 	.word	0x40011400
 80048c8:	40007800 	.word	0x40007800
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a71      	ldr	r2, [pc, #452]	; (8004a98 <UART_SetConfig+0x4b8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d125      	bne.n	8004922 <UART_SetConfig+0x342>
 80048d6:	4b71      	ldr	r3, [pc, #452]	; (8004a9c <UART_SetConfig+0x4bc>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048e4:	d017      	beq.n	8004916 <UART_SetConfig+0x336>
 80048e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048ea:	d817      	bhi.n	800491c <UART_SetConfig+0x33c>
 80048ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f0:	d00b      	beq.n	800490a <UART_SetConfig+0x32a>
 80048f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f6:	d811      	bhi.n	800491c <UART_SetConfig+0x33c>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <UART_SetConfig+0x324>
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004900:	d006      	beq.n	8004910 <UART_SetConfig+0x330>
 8004902:	e00b      	b.n	800491c <UART_SetConfig+0x33c>
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e00d      	b.n	8004926 <UART_SetConfig+0x346>
 800490a:	2302      	movs	r3, #2
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e00a      	b.n	8004926 <UART_SetConfig+0x346>
 8004910:	2304      	movs	r3, #4
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e007      	b.n	8004926 <UART_SetConfig+0x346>
 8004916:	2308      	movs	r3, #8
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e004      	b.n	8004926 <UART_SetConfig+0x346>
 800491c:	2310      	movs	r3, #16
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e001      	b.n	8004926 <UART_SetConfig+0x346>
 8004922:	2310      	movs	r3, #16
 8004924:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492e:	d15a      	bne.n	80049e6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004930:	7ffb      	ldrb	r3, [r7, #31]
 8004932:	2b08      	cmp	r3, #8
 8004934:	d827      	bhi.n	8004986 <UART_SetConfig+0x3a6>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x35c>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	08004987 	.word	0x08004987
 800494c:	08004977 	.word	0x08004977
 8004950:	08004987 	.word	0x08004987
 8004954:	08004987 	.word	0x08004987
 8004958:	08004987 	.word	0x08004987
 800495c:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe f870 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8004964:	61b8      	str	r0, [r7, #24]
        break;
 8004966:	e013      	b.n	8004990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7fe f880 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 800496c:	61b8      	str	r0, [r7, #24]
        break;
 800496e:	e00f      	b.n	8004990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b4b      	ldr	r3, [pc, #300]	; (8004aa0 <UART_SetConfig+0x4c0>)
 8004972:	61bb      	str	r3, [r7, #24]
        break;
 8004974:	e00c      	b.n	8004990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fd ff79 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800497a:	61b8      	str	r0, [r7, #24]
        break;
 800497c:	e008      	b.n	8004990 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004982:	61bb      	str	r3, [r7, #24]
        break;
 8004984:	e004      	b.n	8004990 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	77bb      	strb	r3, [r7, #30]
        break;
 800498e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d074      	beq.n	8004a80 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	005a      	lsls	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d916      	bls.n	80049e0 <UART_SetConfig+0x400>
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d212      	bcs.n	80049e0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f023 030f 	bic.w	r3, r3, #15
 80049c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	89fa      	ldrh	r2, [r7, #14]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	e04f      	b.n	8004a80 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	77bb      	strb	r3, [r7, #30]
 80049e4:	e04c      	b.n	8004a80 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d828      	bhi.n	8004a3e <UART_SetConfig+0x45e>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0x414>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a3f 	.word	0x08004a3f
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a3f 	.word	0x08004a3f
 8004a10:	08004a3f 	.word	0x08004a3f
 8004a14:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fe f814 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	61b8      	str	r0, [r7, #24]
        break;
 8004a1e:	e013      	b.n	8004a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe f824 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8004a24:	61b8      	str	r0, [r7, #24]
        break;
 8004a26:	e00f      	b.n	8004a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <UART_SetConfig+0x4c0>)
 8004a2a:	61bb      	str	r3, [r7, #24]
        break;
 8004a2c:	e00c      	b.n	8004a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fd ff1d 	bl	800286c <HAL_RCC_GetSysClockFreq>
 8004a32:	61b8      	str	r0, [r7, #24]
        break;
 8004a34:	e008      	b.n	8004a48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	61bb      	str	r3, [r7, #24]
        break;
 8004a3c:	e004      	b.n	8004a48 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	77bb      	strb	r3, [r7, #30]
        break;
 8004a46:	bf00      	nop
    }

    if (pclk != 0U)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d018      	beq.n	8004a80 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	085a      	lsrs	r2, r3, #1
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	441a      	add	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d909      	bls.n	8004a7c <UART_SetConfig+0x49c>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6e:	d205      	bcs.n	8004a7c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e001      	b.n	8004a80 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40007c00 	.word	0x40007c00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	00f42400 	.word	0x00f42400

08004aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01a      	beq.n	8004bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d10a      	bne.n	8004bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bf8:	f7fc fe9c 	bl	8001934 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d10e      	bne.n	8004c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f82d 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e023      	b.n	8004c72 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d10e      	bne.n	8004c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f817 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e00d      	b.n	8004c72 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b09c      	sub	sp, #112	; 0x70
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8a:	e0a5      	b.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	f000 80a1 	beq.w	8004dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fc fe4d 	bl	8001934 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <UART_WaitOnFlagUntilTimeout+0x32>
 8004ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13e      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ccc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e6      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e5      	bne.n	8004cde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e067      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d04f      	beq.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d46:	d147      	bne.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
 8004d72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004da4:	623a      	str	r2, [r7, #32]
 8004da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e010      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4013      	ands	r3, r2
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	f43f af4a 	beq.w	8004c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3770      	adds	r7, #112	; 0x70
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b095      	sub	sp, #84	; 0x54
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	643b      	str	r3, [r7, #64]	; 0x40
 8004e2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e6      	bne.n	8004e0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3308      	adds	r3, #8
 8004e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e5      	bne.n	8004e3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d118      	bne.n	8004eaa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f023 0310 	bic.w	r3, r3, #16
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e6      	bne.n	8004e78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ebc:	bf00      	nop
 8004ebe:	3754      	adds	r7, #84	; 0x54
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff fb5a 	bl	80045a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b08f      	sub	sp, #60	; 0x3c
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f00:	2b21      	cmp	r3, #33	; 0x21
 8004f02:	d14c      	bne.n	8004f9e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d132      	bne.n	8004f76 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e6      	bne.n	8004f10 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004f74:	e013      	b.n	8004f9e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004f9e:	bf00      	nop
 8004fa0:	373c      	adds	r7, #60	; 0x3c
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b091      	sub	sp, #68	; 0x44
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb6:	2b21      	cmp	r3, #33	; 0x21
 8004fb8:	d151      	bne.n	800505e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d132      	bne.n	800502c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	60fb      	str	r3, [r7, #12]
   return(result);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	69b9      	ldr	r1, [r7, #24]
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	617b      	str	r3, [r7, #20]
   return(result);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e6      	bne.n	8004ff8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800502a:	e018      	b.n	800505e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	1c9a      	adds	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800505e:	bf00      	nop
 8005060:	3744      	adds	r7, #68	; 0x44
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	613b      	str	r3, [r7, #16]
   return(result);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fc fb6d 	bl	8001790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b6:	bf00      	nop
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <__errno>:
 80050c0:	4b01      	ldr	r3, [pc, #4]	; (80050c8 <__errno+0x8>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000000c 	.word	0x2000000c

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4d0d      	ldr	r5, [pc, #52]	; (8005104 <__libc_init_array+0x38>)
 80050d0:	4c0d      	ldr	r4, [pc, #52]	; (8005108 <__libc_init_array+0x3c>)
 80050d2:	1b64      	subs	r4, r4, r5
 80050d4:	10a4      	asrs	r4, r4, #2
 80050d6:	2600      	movs	r6, #0
 80050d8:	42a6      	cmp	r6, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	4d0b      	ldr	r5, [pc, #44]	; (800510c <__libc_init_array+0x40>)
 80050de:	4c0c      	ldr	r4, [pc, #48]	; (8005110 <__libc_init_array+0x44>)
 80050e0:	f000 fc8a 	bl	80059f8 <_init>
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	2600      	movs	r6, #0
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f4:	4798      	blx	r3
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fe:	4798      	blx	r3
 8005100:	3601      	adds	r6, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	08005c28 	.word	0x08005c28
 8005108:	08005c28 	.word	0x08005c28
 800510c:	08005c28 	.word	0x08005c28
 8005110:	08005c2c 	.word	0x08005c2c

08005114 <memcpy>:
 8005114:	440a      	add	r2, r1
 8005116:	4291      	cmp	r1, r2
 8005118:	f100 33ff 	add.w	r3, r0, #4294967295
 800511c:	d100      	bne.n	8005120 <memcpy+0xc>
 800511e:	4770      	bx	lr
 8005120:	b510      	push	{r4, lr}
 8005122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800512a:	4291      	cmp	r1, r2
 800512c:	d1f9      	bne.n	8005122 <memcpy+0xe>
 800512e:	bd10      	pop	{r4, pc}

08005130 <memset>:
 8005130:	4402      	add	r2, r0
 8005132:	4603      	mov	r3, r0
 8005134:	4293      	cmp	r3, r2
 8005136:	d100      	bne.n	800513a <memset+0xa>
 8005138:	4770      	bx	lr
 800513a:	f803 1b01 	strb.w	r1, [r3], #1
 800513e:	e7f9      	b.n	8005134 <memset+0x4>

08005140 <sniprintf>:
 8005140:	b40c      	push	{r2, r3}
 8005142:	b530      	push	{r4, r5, lr}
 8005144:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <sniprintf+0x64>)
 8005146:	1e0c      	subs	r4, r1, #0
 8005148:	681d      	ldr	r5, [r3, #0]
 800514a:	b09d      	sub	sp, #116	; 0x74
 800514c:	da08      	bge.n	8005160 <sniprintf+0x20>
 800514e:	238b      	movs	r3, #139	; 0x8b
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	f04f 30ff 	mov.w	r0, #4294967295
 8005156:	b01d      	add	sp, #116	; 0x74
 8005158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800515c:	b002      	add	sp, #8
 800515e:	4770      	bx	lr
 8005160:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005164:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005168:	bf14      	ite	ne
 800516a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800516e:	4623      	moveq	r3, r4
 8005170:	9304      	str	r3, [sp, #16]
 8005172:	9307      	str	r3, [sp, #28]
 8005174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005178:	9002      	str	r0, [sp, #8]
 800517a:	9006      	str	r0, [sp, #24]
 800517c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005180:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005182:	ab21      	add	r3, sp, #132	; 0x84
 8005184:	a902      	add	r1, sp, #8
 8005186:	4628      	mov	r0, r5
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	f000 f891 	bl	80052b0 <_svfiprintf_r>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	bfbc      	itt	lt
 8005192:	238b      	movlt	r3, #139	; 0x8b
 8005194:	602b      	strlt	r3, [r5, #0]
 8005196:	2c00      	cmp	r4, #0
 8005198:	d0dd      	beq.n	8005156 <sniprintf+0x16>
 800519a:	9b02      	ldr	r3, [sp, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e7d9      	b.n	8005156 <sniprintf+0x16>
 80051a2:	bf00      	nop
 80051a4:	2000000c 	.word	0x2000000c

080051a8 <siprintf>:
 80051a8:	b40e      	push	{r1, r2, r3}
 80051aa:	b500      	push	{lr}
 80051ac:	b09c      	sub	sp, #112	; 0x70
 80051ae:	ab1d      	add	r3, sp, #116	; 0x74
 80051b0:	9002      	str	r0, [sp, #8]
 80051b2:	9006      	str	r0, [sp, #24]
 80051b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051b8:	4809      	ldr	r0, [pc, #36]	; (80051e0 <siprintf+0x38>)
 80051ba:	9107      	str	r1, [sp, #28]
 80051bc:	9104      	str	r1, [sp, #16]
 80051be:	4909      	ldr	r1, [pc, #36]	; (80051e4 <siprintf+0x3c>)
 80051c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c4:	9105      	str	r1, [sp, #20]
 80051c6:	6800      	ldr	r0, [r0, #0]
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	a902      	add	r1, sp, #8
 80051cc:	f000 f870 	bl	80052b0 <_svfiprintf_r>
 80051d0:	9b02      	ldr	r3, [sp, #8]
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	b01c      	add	sp, #112	; 0x70
 80051d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051dc:	b003      	add	sp, #12
 80051de:	4770      	bx	lr
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	ffff0208 	.word	0xffff0208

080051e8 <strcpy>:
 80051e8:	4603      	mov	r3, r0
 80051ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ee:	f803 2b01 	strb.w	r2, [r3], #1
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	d1f9      	bne.n	80051ea <strcpy+0x2>
 80051f6:	4770      	bx	lr

080051f8 <__ssputs_r>:
 80051f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	688e      	ldr	r6, [r1, #8]
 80051fe:	429e      	cmp	r6, r3
 8005200:	4682      	mov	sl, r0
 8005202:	460c      	mov	r4, r1
 8005204:	4690      	mov	r8, r2
 8005206:	461f      	mov	r7, r3
 8005208:	d838      	bhi.n	800527c <__ssputs_r+0x84>
 800520a:	898a      	ldrh	r2, [r1, #12]
 800520c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005210:	d032      	beq.n	8005278 <__ssputs_r+0x80>
 8005212:	6825      	ldr	r5, [r4, #0]
 8005214:	6909      	ldr	r1, [r1, #16]
 8005216:	eba5 0901 	sub.w	r9, r5, r1
 800521a:	6965      	ldr	r5, [r4, #20]
 800521c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005220:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005224:	3301      	adds	r3, #1
 8005226:	444b      	add	r3, r9
 8005228:	106d      	asrs	r5, r5, #1
 800522a:	429d      	cmp	r5, r3
 800522c:	bf38      	it	cc
 800522e:	461d      	movcc	r5, r3
 8005230:	0553      	lsls	r3, r2, #21
 8005232:	d531      	bpl.n	8005298 <__ssputs_r+0xa0>
 8005234:	4629      	mov	r1, r5
 8005236:	f000 fb39 	bl	80058ac <_malloc_r>
 800523a:	4606      	mov	r6, r0
 800523c:	b950      	cbnz	r0, 8005254 <__ssputs_r+0x5c>
 800523e:	230c      	movs	r3, #12
 8005240:	f8ca 3000 	str.w	r3, [sl]
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005254:	6921      	ldr	r1, [r4, #16]
 8005256:	464a      	mov	r2, r9
 8005258:	f7ff ff5c 	bl	8005114 <memcpy>
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005266:	81a3      	strh	r3, [r4, #12]
 8005268:	6126      	str	r6, [r4, #16]
 800526a:	6165      	str	r5, [r4, #20]
 800526c:	444e      	add	r6, r9
 800526e:	eba5 0509 	sub.w	r5, r5, r9
 8005272:	6026      	str	r6, [r4, #0]
 8005274:	60a5      	str	r5, [r4, #8]
 8005276:	463e      	mov	r6, r7
 8005278:	42be      	cmp	r6, r7
 800527a:	d900      	bls.n	800527e <__ssputs_r+0x86>
 800527c:	463e      	mov	r6, r7
 800527e:	4632      	mov	r2, r6
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	4641      	mov	r1, r8
 8005284:	f000 faa8 	bl	80057d8 <memmove>
 8005288:	68a3      	ldr	r3, [r4, #8]
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	1b9b      	subs	r3, r3, r6
 800528e:	4432      	add	r2, r6
 8005290:	60a3      	str	r3, [r4, #8]
 8005292:	6022      	str	r2, [r4, #0]
 8005294:	2000      	movs	r0, #0
 8005296:	e7db      	b.n	8005250 <__ssputs_r+0x58>
 8005298:	462a      	mov	r2, r5
 800529a:	f000 fb61 	bl	8005960 <_realloc_r>
 800529e:	4606      	mov	r6, r0
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d1e1      	bne.n	8005268 <__ssputs_r+0x70>
 80052a4:	6921      	ldr	r1, [r4, #16]
 80052a6:	4650      	mov	r0, sl
 80052a8:	f000 fab0 	bl	800580c <_free_r>
 80052ac:	e7c7      	b.n	800523e <__ssputs_r+0x46>
	...

080052b0 <_svfiprintf_r>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	4698      	mov	r8, r3
 80052b6:	898b      	ldrh	r3, [r1, #12]
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	b09d      	sub	sp, #116	; 0x74
 80052bc:	4607      	mov	r7, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	4614      	mov	r4, r2
 80052c2:	d50e      	bpl.n	80052e2 <_svfiprintf_r+0x32>
 80052c4:	690b      	ldr	r3, [r1, #16]
 80052c6:	b963      	cbnz	r3, 80052e2 <_svfiprintf_r+0x32>
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	f000 faef 	bl	80058ac <_malloc_r>
 80052ce:	6028      	str	r0, [r5, #0]
 80052d0:	6128      	str	r0, [r5, #16]
 80052d2:	b920      	cbnz	r0, 80052de <_svfiprintf_r+0x2e>
 80052d4:	230c      	movs	r3, #12
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	e0d1      	b.n	8005482 <_svfiprintf_r+0x1d2>
 80052de:	2340      	movs	r3, #64	; 0x40
 80052e0:	616b      	str	r3, [r5, #20]
 80052e2:	2300      	movs	r3, #0
 80052e4:	9309      	str	r3, [sp, #36]	; 0x24
 80052e6:	2320      	movs	r3, #32
 80052e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80052f0:	2330      	movs	r3, #48	; 0x30
 80052f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800549c <_svfiprintf_r+0x1ec>
 80052f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052fa:	f04f 0901 	mov.w	r9, #1
 80052fe:	4623      	mov	r3, r4
 8005300:	469a      	mov	sl, r3
 8005302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005306:	b10a      	cbz	r2, 800530c <_svfiprintf_r+0x5c>
 8005308:	2a25      	cmp	r2, #37	; 0x25
 800530a:	d1f9      	bne.n	8005300 <_svfiprintf_r+0x50>
 800530c:	ebba 0b04 	subs.w	fp, sl, r4
 8005310:	d00b      	beq.n	800532a <_svfiprintf_r+0x7a>
 8005312:	465b      	mov	r3, fp
 8005314:	4622      	mov	r2, r4
 8005316:	4629      	mov	r1, r5
 8005318:	4638      	mov	r0, r7
 800531a:	f7ff ff6d 	bl	80051f8 <__ssputs_r>
 800531e:	3001      	adds	r0, #1
 8005320:	f000 80aa 	beq.w	8005478 <_svfiprintf_r+0x1c8>
 8005324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005326:	445a      	add	r2, fp
 8005328:	9209      	str	r2, [sp, #36]	; 0x24
 800532a:	f89a 3000 	ldrb.w	r3, [sl]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80a2 	beq.w	8005478 <_svfiprintf_r+0x1c8>
 8005334:	2300      	movs	r3, #0
 8005336:	f04f 32ff 	mov.w	r2, #4294967295
 800533a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800533e:	f10a 0a01 	add.w	sl, sl, #1
 8005342:	9304      	str	r3, [sp, #16]
 8005344:	9307      	str	r3, [sp, #28]
 8005346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800534a:	931a      	str	r3, [sp, #104]	; 0x68
 800534c:	4654      	mov	r4, sl
 800534e:	2205      	movs	r2, #5
 8005350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005354:	4851      	ldr	r0, [pc, #324]	; (800549c <_svfiprintf_r+0x1ec>)
 8005356:	f7fa ff73 	bl	8000240 <memchr>
 800535a:	9a04      	ldr	r2, [sp, #16]
 800535c:	b9d8      	cbnz	r0, 8005396 <_svfiprintf_r+0xe6>
 800535e:	06d0      	lsls	r0, r2, #27
 8005360:	bf44      	itt	mi
 8005362:	2320      	movmi	r3, #32
 8005364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005368:	0711      	lsls	r1, r2, #28
 800536a:	bf44      	itt	mi
 800536c:	232b      	movmi	r3, #43	; 0x2b
 800536e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005372:	f89a 3000 	ldrb.w	r3, [sl]
 8005376:	2b2a      	cmp	r3, #42	; 0x2a
 8005378:	d015      	beq.n	80053a6 <_svfiprintf_r+0xf6>
 800537a:	9a07      	ldr	r2, [sp, #28]
 800537c:	4654      	mov	r4, sl
 800537e:	2000      	movs	r0, #0
 8005380:	f04f 0c0a 	mov.w	ip, #10
 8005384:	4621      	mov	r1, r4
 8005386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800538a:	3b30      	subs	r3, #48	; 0x30
 800538c:	2b09      	cmp	r3, #9
 800538e:	d94e      	bls.n	800542e <_svfiprintf_r+0x17e>
 8005390:	b1b0      	cbz	r0, 80053c0 <_svfiprintf_r+0x110>
 8005392:	9207      	str	r2, [sp, #28]
 8005394:	e014      	b.n	80053c0 <_svfiprintf_r+0x110>
 8005396:	eba0 0308 	sub.w	r3, r0, r8
 800539a:	fa09 f303 	lsl.w	r3, r9, r3
 800539e:	4313      	orrs	r3, r2
 80053a0:	9304      	str	r3, [sp, #16]
 80053a2:	46a2      	mov	sl, r4
 80053a4:	e7d2      	b.n	800534c <_svfiprintf_r+0x9c>
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	1d19      	adds	r1, r3, #4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	9103      	str	r1, [sp, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfbb      	ittet	lt
 80053b2:	425b      	neglt	r3, r3
 80053b4:	f042 0202 	orrlt.w	r2, r2, #2
 80053b8:	9307      	strge	r3, [sp, #28]
 80053ba:	9307      	strlt	r3, [sp, #28]
 80053bc:	bfb8      	it	lt
 80053be:	9204      	strlt	r2, [sp, #16]
 80053c0:	7823      	ldrb	r3, [r4, #0]
 80053c2:	2b2e      	cmp	r3, #46	; 0x2e
 80053c4:	d10c      	bne.n	80053e0 <_svfiprintf_r+0x130>
 80053c6:	7863      	ldrb	r3, [r4, #1]
 80053c8:	2b2a      	cmp	r3, #42	; 0x2a
 80053ca:	d135      	bne.n	8005438 <_svfiprintf_r+0x188>
 80053cc:	9b03      	ldr	r3, [sp, #12]
 80053ce:	1d1a      	adds	r2, r3, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	9203      	str	r2, [sp, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bfb8      	it	lt
 80053d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80053dc:	3402      	adds	r4, #2
 80053de:	9305      	str	r3, [sp, #20]
 80053e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054ac <_svfiprintf_r+0x1fc>
 80053e4:	7821      	ldrb	r1, [r4, #0]
 80053e6:	2203      	movs	r2, #3
 80053e8:	4650      	mov	r0, sl
 80053ea:	f7fa ff29 	bl	8000240 <memchr>
 80053ee:	b140      	cbz	r0, 8005402 <_svfiprintf_r+0x152>
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	eba0 000a 	sub.w	r0, r0, sl
 80053f6:	fa03 f000 	lsl.w	r0, r3, r0
 80053fa:	9b04      	ldr	r3, [sp, #16]
 80053fc:	4303      	orrs	r3, r0
 80053fe:	3401      	adds	r4, #1
 8005400:	9304      	str	r3, [sp, #16]
 8005402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005406:	4826      	ldr	r0, [pc, #152]	; (80054a0 <_svfiprintf_r+0x1f0>)
 8005408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800540c:	2206      	movs	r2, #6
 800540e:	f7fa ff17 	bl	8000240 <memchr>
 8005412:	2800      	cmp	r0, #0
 8005414:	d038      	beq.n	8005488 <_svfiprintf_r+0x1d8>
 8005416:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <_svfiprintf_r+0x1f4>)
 8005418:	bb1b      	cbnz	r3, 8005462 <_svfiprintf_r+0x1b2>
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	3307      	adds	r3, #7
 800541e:	f023 0307 	bic.w	r3, r3, #7
 8005422:	3308      	adds	r3, #8
 8005424:	9303      	str	r3, [sp, #12]
 8005426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005428:	4433      	add	r3, r6
 800542a:	9309      	str	r3, [sp, #36]	; 0x24
 800542c:	e767      	b.n	80052fe <_svfiprintf_r+0x4e>
 800542e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005432:	460c      	mov	r4, r1
 8005434:	2001      	movs	r0, #1
 8005436:	e7a5      	b.n	8005384 <_svfiprintf_r+0xd4>
 8005438:	2300      	movs	r3, #0
 800543a:	3401      	adds	r4, #1
 800543c:	9305      	str	r3, [sp, #20]
 800543e:	4619      	mov	r1, r3
 8005440:	f04f 0c0a 	mov.w	ip, #10
 8005444:	4620      	mov	r0, r4
 8005446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800544a:	3a30      	subs	r2, #48	; 0x30
 800544c:	2a09      	cmp	r2, #9
 800544e:	d903      	bls.n	8005458 <_svfiprintf_r+0x1a8>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0c5      	beq.n	80053e0 <_svfiprintf_r+0x130>
 8005454:	9105      	str	r1, [sp, #20]
 8005456:	e7c3      	b.n	80053e0 <_svfiprintf_r+0x130>
 8005458:	fb0c 2101 	mla	r1, ip, r1, r2
 800545c:	4604      	mov	r4, r0
 800545e:	2301      	movs	r3, #1
 8005460:	e7f0      	b.n	8005444 <_svfiprintf_r+0x194>
 8005462:	ab03      	add	r3, sp, #12
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	462a      	mov	r2, r5
 8005468:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <_svfiprintf_r+0x1f8>)
 800546a:	a904      	add	r1, sp, #16
 800546c:	4638      	mov	r0, r7
 800546e:	f3af 8000 	nop.w
 8005472:	1c42      	adds	r2, r0, #1
 8005474:	4606      	mov	r6, r0
 8005476:	d1d6      	bne.n	8005426 <_svfiprintf_r+0x176>
 8005478:	89ab      	ldrh	r3, [r5, #12]
 800547a:	065b      	lsls	r3, r3, #25
 800547c:	f53f af2c 	bmi.w	80052d8 <_svfiprintf_r+0x28>
 8005480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005482:	b01d      	add	sp, #116	; 0x74
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	ab03      	add	r3, sp, #12
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	462a      	mov	r2, r5
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <_svfiprintf_r+0x1f8>)
 8005490:	a904      	add	r1, sp, #16
 8005492:	4638      	mov	r0, r7
 8005494:	f000 f87a 	bl	800558c <_printf_i>
 8005498:	e7eb      	b.n	8005472 <_svfiprintf_r+0x1c2>
 800549a:	bf00      	nop
 800549c:	08005bec 	.word	0x08005bec
 80054a0:	08005bf6 	.word	0x08005bf6
 80054a4:	00000000 	.word	0x00000000
 80054a8:	080051f9 	.word	0x080051f9
 80054ac:	08005bf2 	.word	0x08005bf2

080054b0 <_printf_common>:
 80054b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	4616      	mov	r6, r2
 80054b6:	4699      	mov	r9, r3
 80054b8:	688a      	ldr	r2, [r1, #8]
 80054ba:	690b      	ldr	r3, [r1, #16]
 80054bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bfb8      	it	lt
 80054c4:	4613      	movlt	r3, r2
 80054c6:	6033      	str	r3, [r6, #0]
 80054c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054cc:	4607      	mov	r7, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	b10a      	cbz	r2, 80054d6 <_printf_common+0x26>
 80054d2:	3301      	adds	r3, #1
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	0699      	lsls	r1, r3, #26
 80054da:	bf42      	ittt	mi
 80054dc:	6833      	ldrmi	r3, [r6, #0]
 80054de:	3302      	addmi	r3, #2
 80054e0:	6033      	strmi	r3, [r6, #0]
 80054e2:	6825      	ldr	r5, [r4, #0]
 80054e4:	f015 0506 	ands.w	r5, r5, #6
 80054e8:	d106      	bne.n	80054f8 <_printf_common+0x48>
 80054ea:	f104 0a19 	add.w	sl, r4, #25
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	6832      	ldr	r2, [r6, #0]
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	42ab      	cmp	r3, r5
 80054f6:	dc26      	bgt.n	8005546 <_printf_common+0x96>
 80054f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054fc:	1e13      	subs	r3, r2, #0
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	bf18      	it	ne
 8005502:	2301      	movne	r3, #1
 8005504:	0692      	lsls	r2, r2, #26
 8005506:	d42b      	bmi.n	8005560 <_printf_common+0xb0>
 8005508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800550c:	4649      	mov	r1, r9
 800550e:	4638      	mov	r0, r7
 8005510:	47c0      	blx	r8
 8005512:	3001      	adds	r0, #1
 8005514:	d01e      	beq.n	8005554 <_printf_common+0xa4>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	68e5      	ldr	r5, [r4, #12]
 800551a:	6832      	ldr	r2, [r6, #0]
 800551c:	f003 0306 	and.w	r3, r3, #6
 8005520:	2b04      	cmp	r3, #4
 8005522:	bf08      	it	eq
 8005524:	1aad      	subeq	r5, r5, r2
 8005526:	68a3      	ldr	r3, [r4, #8]
 8005528:	6922      	ldr	r2, [r4, #16]
 800552a:	bf0c      	ite	eq
 800552c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005530:	2500      	movne	r5, #0
 8005532:	4293      	cmp	r3, r2
 8005534:	bfc4      	itt	gt
 8005536:	1a9b      	subgt	r3, r3, r2
 8005538:	18ed      	addgt	r5, r5, r3
 800553a:	2600      	movs	r6, #0
 800553c:	341a      	adds	r4, #26
 800553e:	42b5      	cmp	r5, r6
 8005540:	d11a      	bne.n	8005578 <_printf_common+0xc8>
 8005542:	2000      	movs	r0, #0
 8005544:	e008      	b.n	8005558 <_printf_common+0xa8>
 8005546:	2301      	movs	r3, #1
 8005548:	4652      	mov	r2, sl
 800554a:	4649      	mov	r1, r9
 800554c:	4638      	mov	r0, r7
 800554e:	47c0      	blx	r8
 8005550:	3001      	adds	r0, #1
 8005552:	d103      	bne.n	800555c <_printf_common+0xac>
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	3501      	adds	r5, #1
 800555e:	e7c6      	b.n	80054ee <_printf_common+0x3e>
 8005560:	18e1      	adds	r1, r4, r3
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	2030      	movs	r0, #48	; 0x30
 8005566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800556a:	4422      	add	r2, r4
 800556c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005574:	3302      	adds	r3, #2
 8005576:	e7c7      	b.n	8005508 <_printf_common+0x58>
 8005578:	2301      	movs	r3, #1
 800557a:	4622      	mov	r2, r4
 800557c:	4649      	mov	r1, r9
 800557e:	4638      	mov	r0, r7
 8005580:	47c0      	blx	r8
 8005582:	3001      	adds	r0, #1
 8005584:	d0e6      	beq.n	8005554 <_printf_common+0xa4>
 8005586:	3601      	adds	r6, #1
 8005588:	e7d9      	b.n	800553e <_printf_common+0x8e>
	...

0800558c <_printf_i>:
 800558c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	460c      	mov	r4, r1
 8005592:	4691      	mov	r9, r2
 8005594:	7e27      	ldrb	r7, [r4, #24]
 8005596:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005598:	2f78      	cmp	r7, #120	; 0x78
 800559a:	4680      	mov	r8, r0
 800559c:	469a      	mov	sl, r3
 800559e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a2:	d807      	bhi.n	80055b4 <_printf_i+0x28>
 80055a4:	2f62      	cmp	r7, #98	; 0x62
 80055a6:	d80a      	bhi.n	80055be <_printf_i+0x32>
 80055a8:	2f00      	cmp	r7, #0
 80055aa:	f000 80d8 	beq.w	800575e <_printf_i+0x1d2>
 80055ae:	2f58      	cmp	r7, #88	; 0x58
 80055b0:	f000 80a3 	beq.w	80056fa <_printf_i+0x16e>
 80055b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055bc:	e03a      	b.n	8005634 <_printf_i+0xa8>
 80055be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055c2:	2b15      	cmp	r3, #21
 80055c4:	d8f6      	bhi.n	80055b4 <_printf_i+0x28>
 80055c6:	a001      	add	r0, pc, #4	; (adr r0, 80055cc <_printf_i+0x40>)
 80055c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055cc:	08005625 	.word	0x08005625
 80055d0:	08005639 	.word	0x08005639
 80055d4:	080055b5 	.word	0x080055b5
 80055d8:	080055b5 	.word	0x080055b5
 80055dc:	080055b5 	.word	0x080055b5
 80055e0:	080055b5 	.word	0x080055b5
 80055e4:	08005639 	.word	0x08005639
 80055e8:	080055b5 	.word	0x080055b5
 80055ec:	080055b5 	.word	0x080055b5
 80055f0:	080055b5 	.word	0x080055b5
 80055f4:	080055b5 	.word	0x080055b5
 80055f8:	08005745 	.word	0x08005745
 80055fc:	08005669 	.word	0x08005669
 8005600:	08005727 	.word	0x08005727
 8005604:	080055b5 	.word	0x080055b5
 8005608:	080055b5 	.word	0x080055b5
 800560c:	08005767 	.word	0x08005767
 8005610:	080055b5 	.word	0x080055b5
 8005614:	08005669 	.word	0x08005669
 8005618:	080055b5 	.word	0x080055b5
 800561c:	080055b5 	.word	0x080055b5
 8005620:	0800572f 	.word	0x0800572f
 8005624:	680b      	ldr	r3, [r1, #0]
 8005626:	1d1a      	adds	r2, r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	600a      	str	r2, [r1, #0]
 800562c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005634:	2301      	movs	r3, #1
 8005636:	e0a3      	b.n	8005780 <_printf_i+0x1f4>
 8005638:	6825      	ldr	r5, [r4, #0]
 800563a:	6808      	ldr	r0, [r1, #0]
 800563c:	062e      	lsls	r6, r5, #24
 800563e:	f100 0304 	add.w	r3, r0, #4
 8005642:	d50a      	bpl.n	800565a <_printf_i+0xce>
 8005644:	6805      	ldr	r5, [r0, #0]
 8005646:	600b      	str	r3, [r1, #0]
 8005648:	2d00      	cmp	r5, #0
 800564a:	da03      	bge.n	8005654 <_printf_i+0xc8>
 800564c:	232d      	movs	r3, #45	; 0x2d
 800564e:	426d      	negs	r5, r5
 8005650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005654:	485e      	ldr	r0, [pc, #376]	; (80057d0 <_printf_i+0x244>)
 8005656:	230a      	movs	r3, #10
 8005658:	e019      	b.n	800568e <_printf_i+0x102>
 800565a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800565e:	6805      	ldr	r5, [r0, #0]
 8005660:	600b      	str	r3, [r1, #0]
 8005662:	bf18      	it	ne
 8005664:	b22d      	sxthne	r5, r5
 8005666:	e7ef      	b.n	8005648 <_printf_i+0xbc>
 8005668:	680b      	ldr	r3, [r1, #0]
 800566a:	6825      	ldr	r5, [r4, #0]
 800566c:	1d18      	adds	r0, r3, #4
 800566e:	6008      	str	r0, [r1, #0]
 8005670:	0628      	lsls	r0, r5, #24
 8005672:	d501      	bpl.n	8005678 <_printf_i+0xec>
 8005674:	681d      	ldr	r5, [r3, #0]
 8005676:	e002      	b.n	800567e <_printf_i+0xf2>
 8005678:	0669      	lsls	r1, r5, #25
 800567a:	d5fb      	bpl.n	8005674 <_printf_i+0xe8>
 800567c:	881d      	ldrh	r5, [r3, #0]
 800567e:	4854      	ldr	r0, [pc, #336]	; (80057d0 <_printf_i+0x244>)
 8005680:	2f6f      	cmp	r7, #111	; 0x6f
 8005682:	bf0c      	ite	eq
 8005684:	2308      	moveq	r3, #8
 8005686:	230a      	movne	r3, #10
 8005688:	2100      	movs	r1, #0
 800568a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800568e:	6866      	ldr	r6, [r4, #4]
 8005690:	60a6      	str	r6, [r4, #8]
 8005692:	2e00      	cmp	r6, #0
 8005694:	bfa2      	ittt	ge
 8005696:	6821      	ldrge	r1, [r4, #0]
 8005698:	f021 0104 	bicge.w	r1, r1, #4
 800569c:	6021      	strge	r1, [r4, #0]
 800569e:	b90d      	cbnz	r5, 80056a4 <_printf_i+0x118>
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	d04d      	beq.n	8005740 <_printf_i+0x1b4>
 80056a4:	4616      	mov	r6, r2
 80056a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80056aa:	fb03 5711 	mls	r7, r3, r1, r5
 80056ae:	5dc7      	ldrb	r7, [r0, r7]
 80056b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b4:	462f      	mov	r7, r5
 80056b6:	42bb      	cmp	r3, r7
 80056b8:	460d      	mov	r5, r1
 80056ba:	d9f4      	bls.n	80056a6 <_printf_i+0x11a>
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d10b      	bne.n	80056d8 <_printf_i+0x14c>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	07df      	lsls	r7, r3, #31
 80056c4:	d508      	bpl.n	80056d8 <_printf_i+0x14c>
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	6861      	ldr	r1, [r4, #4]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	bfde      	ittt	le
 80056ce:	2330      	movle	r3, #48	; 0x30
 80056d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056d8:	1b92      	subs	r2, r2, r6
 80056da:	6122      	str	r2, [r4, #16]
 80056dc:	f8cd a000 	str.w	sl, [sp]
 80056e0:	464b      	mov	r3, r9
 80056e2:	aa03      	add	r2, sp, #12
 80056e4:	4621      	mov	r1, r4
 80056e6:	4640      	mov	r0, r8
 80056e8:	f7ff fee2 	bl	80054b0 <_printf_common>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d14c      	bne.n	800578a <_printf_i+0x1fe>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b004      	add	sp, #16
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	4835      	ldr	r0, [pc, #212]	; (80057d0 <_printf_i+0x244>)
 80056fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	680e      	ldr	r6, [r1, #0]
 8005704:	061f      	lsls	r7, r3, #24
 8005706:	f856 5b04 	ldr.w	r5, [r6], #4
 800570a:	600e      	str	r6, [r1, #0]
 800570c:	d514      	bpl.n	8005738 <_printf_i+0x1ac>
 800570e:	07d9      	lsls	r1, r3, #31
 8005710:	bf44      	itt	mi
 8005712:	f043 0320 	orrmi.w	r3, r3, #32
 8005716:	6023      	strmi	r3, [r4, #0]
 8005718:	b91d      	cbnz	r5, 8005722 <_printf_i+0x196>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	f023 0320 	bic.w	r3, r3, #32
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	2310      	movs	r3, #16
 8005724:	e7b0      	b.n	8005688 <_printf_i+0xfc>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f043 0320 	orr.w	r3, r3, #32
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	2378      	movs	r3, #120	; 0x78
 8005730:	4828      	ldr	r0, [pc, #160]	; (80057d4 <_printf_i+0x248>)
 8005732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005736:	e7e3      	b.n	8005700 <_printf_i+0x174>
 8005738:	065e      	lsls	r6, r3, #25
 800573a:	bf48      	it	mi
 800573c:	b2ad      	uxthmi	r5, r5
 800573e:	e7e6      	b.n	800570e <_printf_i+0x182>
 8005740:	4616      	mov	r6, r2
 8005742:	e7bb      	b.n	80056bc <_printf_i+0x130>
 8005744:	680b      	ldr	r3, [r1, #0]
 8005746:	6826      	ldr	r6, [r4, #0]
 8005748:	6960      	ldr	r0, [r4, #20]
 800574a:	1d1d      	adds	r5, r3, #4
 800574c:	600d      	str	r5, [r1, #0]
 800574e:	0635      	lsls	r5, r6, #24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	d501      	bpl.n	8005758 <_printf_i+0x1cc>
 8005754:	6018      	str	r0, [r3, #0]
 8005756:	e002      	b.n	800575e <_printf_i+0x1d2>
 8005758:	0671      	lsls	r1, r6, #25
 800575a:	d5fb      	bpl.n	8005754 <_printf_i+0x1c8>
 800575c:	8018      	strh	r0, [r3, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	6123      	str	r3, [r4, #16]
 8005762:	4616      	mov	r6, r2
 8005764:	e7ba      	b.n	80056dc <_printf_i+0x150>
 8005766:	680b      	ldr	r3, [r1, #0]
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	600a      	str	r2, [r1, #0]
 800576c:	681e      	ldr	r6, [r3, #0]
 800576e:	6862      	ldr	r2, [r4, #4]
 8005770:	2100      	movs	r1, #0
 8005772:	4630      	mov	r0, r6
 8005774:	f7fa fd64 	bl	8000240 <memchr>
 8005778:	b108      	cbz	r0, 800577e <_printf_i+0x1f2>
 800577a:	1b80      	subs	r0, r0, r6
 800577c:	6060      	str	r0, [r4, #4]
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	6123      	str	r3, [r4, #16]
 8005782:	2300      	movs	r3, #0
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005788:	e7a8      	b.n	80056dc <_printf_i+0x150>
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	4632      	mov	r2, r6
 800578e:	4649      	mov	r1, r9
 8005790:	4640      	mov	r0, r8
 8005792:	47d0      	blx	sl
 8005794:	3001      	adds	r0, #1
 8005796:	d0ab      	beq.n	80056f0 <_printf_i+0x164>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	079b      	lsls	r3, r3, #30
 800579c:	d413      	bmi.n	80057c6 <_printf_i+0x23a>
 800579e:	68e0      	ldr	r0, [r4, #12]
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	4298      	cmp	r0, r3
 80057a4:	bfb8      	it	lt
 80057a6:	4618      	movlt	r0, r3
 80057a8:	e7a4      	b.n	80056f4 <_printf_i+0x168>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4632      	mov	r2, r6
 80057ae:	4649      	mov	r1, r9
 80057b0:	4640      	mov	r0, r8
 80057b2:	47d0      	blx	sl
 80057b4:	3001      	adds	r0, #1
 80057b6:	d09b      	beq.n	80056f0 <_printf_i+0x164>
 80057b8:	3501      	adds	r5, #1
 80057ba:	68e3      	ldr	r3, [r4, #12]
 80057bc:	9903      	ldr	r1, [sp, #12]
 80057be:	1a5b      	subs	r3, r3, r1
 80057c0:	42ab      	cmp	r3, r5
 80057c2:	dcf2      	bgt.n	80057aa <_printf_i+0x21e>
 80057c4:	e7eb      	b.n	800579e <_printf_i+0x212>
 80057c6:	2500      	movs	r5, #0
 80057c8:	f104 0619 	add.w	r6, r4, #25
 80057cc:	e7f5      	b.n	80057ba <_printf_i+0x22e>
 80057ce:	bf00      	nop
 80057d0:	08005bfd 	.word	0x08005bfd
 80057d4:	08005c0e 	.word	0x08005c0e

080057d8 <memmove>:
 80057d8:	4288      	cmp	r0, r1
 80057da:	b510      	push	{r4, lr}
 80057dc:	eb01 0402 	add.w	r4, r1, r2
 80057e0:	d902      	bls.n	80057e8 <memmove+0x10>
 80057e2:	4284      	cmp	r4, r0
 80057e4:	4623      	mov	r3, r4
 80057e6:	d807      	bhi.n	80057f8 <memmove+0x20>
 80057e8:	1e43      	subs	r3, r0, #1
 80057ea:	42a1      	cmp	r1, r4
 80057ec:	d008      	beq.n	8005800 <memmove+0x28>
 80057ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057f6:	e7f8      	b.n	80057ea <memmove+0x12>
 80057f8:	4402      	add	r2, r0
 80057fa:	4601      	mov	r1, r0
 80057fc:	428a      	cmp	r2, r1
 80057fe:	d100      	bne.n	8005802 <memmove+0x2a>
 8005800:	bd10      	pop	{r4, pc}
 8005802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800580a:	e7f7      	b.n	80057fc <memmove+0x24>

0800580c <_free_r>:
 800580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800580e:	2900      	cmp	r1, #0
 8005810:	d048      	beq.n	80058a4 <_free_r+0x98>
 8005812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005816:	9001      	str	r0, [sp, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f1a1 0404 	sub.w	r4, r1, #4
 800581e:	bfb8      	it	lt
 8005820:	18e4      	addlt	r4, r4, r3
 8005822:	f000 f8d3 	bl	80059cc <__malloc_lock>
 8005826:	4a20      	ldr	r2, [pc, #128]	; (80058a8 <_free_r+0x9c>)
 8005828:	9801      	ldr	r0, [sp, #4]
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	4615      	mov	r5, r2
 800582e:	b933      	cbnz	r3, 800583e <_free_r+0x32>
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	6014      	str	r4, [r2, #0]
 8005834:	b003      	add	sp, #12
 8005836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800583a:	f000 b8cd 	b.w	80059d8 <__malloc_unlock>
 800583e:	42a3      	cmp	r3, r4
 8005840:	d90b      	bls.n	800585a <_free_r+0x4e>
 8005842:	6821      	ldr	r1, [r4, #0]
 8005844:	1862      	adds	r2, r4, r1
 8005846:	4293      	cmp	r3, r2
 8005848:	bf04      	itt	eq
 800584a:	681a      	ldreq	r2, [r3, #0]
 800584c:	685b      	ldreq	r3, [r3, #4]
 800584e:	6063      	str	r3, [r4, #4]
 8005850:	bf04      	itt	eq
 8005852:	1852      	addeq	r2, r2, r1
 8005854:	6022      	streq	r2, [r4, #0]
 8005856:	602c      	str	r4, [r5, #0]
 8005858:	e7ec      	b.n	8005834 <_free_r+0x28>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x58>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x4e>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1855      	adds	r5, r2, r1
 8005868:	42a5      	cmp	r5, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x78>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	4421      	add	r1, r4
 8005870:	1854      	adds	r4, r2, r1
 8005872:	42a3      	cmp	r3, r4
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1dd      	bne.n	8005834 <_free_r+0x28>
 8005878:	681c      	ldr	r4, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	4421      	add	r1, r4
 8005880:	6011      	str	r1, [r2, #0]
 8005882:	e7d7      	b.n	8005834 <_free_r+0x28>
 8005884:	d902      	bls.n	800588c <_free_r+0x80>
 8005886:	230c      	movs	r3, #12
 8005888:	6003      	str	r3, [r0, #0]
 800588a:	e7d3      	b.n	8005834 <_free_r+0x28>
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1961      	adds	r1, r4, r5
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1949      	addeq	r1, r1, r5
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7c7      	b.n	8005834 <_free_r+0x28>
 80058a4:	b003      	add	sp, #12
 80058a6:	bd30      	pop	{r4, r5, pc}
 80058a8:	20000094 	.word	0x20000094

080058ac <_malloc_r>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	1ccd      	adds	r5, r1, #3
 80058b0:	f025 0503 	bic.w	r5, r5, #3
 80058b4:	3508      	adds	r5, #8
 80058b6:	2d0c      	cmp	r5, #12
 80058b8:	bf38      	it	cc
 80058ba:	250c      	movcc	r5, #12
 80058bc:	2d00      	cmp	r5, #0
 80058be:	4606      	mov	r6, r0
 80058c0:	db01      	blt.n	80058c6 <_malloc_r+0x1a>
 80058c2:	42a9      	cmp	r1, r5
 80058c4:	d903      	bls.n	80058ce <_malloc_r+0x22>
 80058c6:	230c      	movs	r3, #12
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	2000      	movs	r0, #0
 80058cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ce:	f000 f87d 	bl	80059cc <__malloc_lock>
 80058d2:	4921      	ldr	r1, [pc, #132]	; (8005958 <_malloc_r+0xac>)
 80058d4:	680a      	ldr	r2, [r1, #0]
 80058d6:	4614      	mov	r4, r2
 80058d8:	b99c      	cbnz	r4, 8005902 <_malloc_r+0x56>
 80058da:	4f20      	ldr	r7, [pc, #128]	; (800595c <_malloc_r+0xb0>)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	b923      	cbnz	r3, 80058ea <_malloc_r+0x3e>
 80058e0:	4621      	mov	r1, r4
 80058e2:	4630      	mov	r0, r6
 80058e4:	f000 f862 	bl	80059ac <_sbrk_r>
 80058e8:	6038      	str	r0, [r7, #0]
 80058ea:	4629      	mov	r1, r5
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 f85d 	bl	80059ac <_sbrk_r>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	d123      	bne.n	800593e <_malloc_r+0x92>
 80058f6:	230c      	movs	r3, #12
 80058f8:	6033      	str	r3, [r6, #0]
 80058fa:	4630      	mov	r0, r6
 80058fc:	f000 f86c 	bl	80059d8 <__malloc_unlock>
 8005900:	e7e3      	b.n	80058ca <_malloc_r+0x1e>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	1b5b      	subs	r3, r3, r5
 8005906:	d417      	bmi.n	8005938 <_malloc_r+0x8c>
 8005908:	2b0b      	cmp	r3, #11
 800590a:	d903      	bls.n	8005914 <_malloc_r+0x68>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	441c      	add	r4, r3
 8005910:	6025      	str	r5, [r4, #0]
 8005912:	e004      	b.n	800591e <_malloc_r+0x72>
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	42a2      	cmp	r2, r4
 8005918:	bf0c      	ite	eq
 800591a:	600b      	streq	r3, [r1, #0]
 800591c:	6053      	strne	r3, [r2, #4]
 800591e:	4630      	mov	r0, r6
 8005920:	f000 f85a 	bl	80059d8 <__malloc_unlock>
 8005924:	f104 000b 	add.w	r0, r4, #11
 8005928:	1d23      	adds	r3, r4, #4
 800592a:	f020 0007 	bic.w	r0, r0, #7
 800592e:	1ac2      	subs	r2, r0, r3
 8005930:	d0cc      	beq.n	80058cc <_malloc_r+0x20>
 8005932:	1a1b      	subs	r3, r3, r0
 8005934:	50a3      	str	r3, [r4, r2]
 8005936:	e7c9      	b.n	80058cc <_malloc_r+0x20>
 8005938:	4622      	mov	r2, r4
 800593a:	6864      	ldr	r4, [r4, #4]
 800593c:	e7cc      	b.n	80058d8 <_malloc_r+0x2c>
 800593e:	1cc4      	adds	r4, r0, #3
 8005940:	f024 0403 	bic.w	r4, r4, #3
 8005944:	42a0      	cmp	r0, r4
 8005946:	d0e3      	beq.n	8005910 <_malloc_r+0x64>
 8005948:	1a21      	subs	r1, r4, r0
 800594a:	4630      	mov	r0, r6
 800594c:	f000 f82e 	bl	80059ac <_sbrk_r>
 8005950:	3001      	adds	r0, #1
 8005952:	d1dd      	bne.n	8005910 <_malloc_r+0x64>
 8005954:	e7cf      	b.n	80058f6 <_malloc_r+0x4a>
 8005956:	bf00      	nop
 8005958:	20000094 	.word	0x20000094
 800595c:	20000098 	.word	0x20000098

08005960 <_realloc_r>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	4607      	mov	r7, r0
 8005964:	4614      	mov	r4, r2
 8005966:	460e      	mov	r6, r1
 8005968:	b921      	cbnz	r1, 8005974 <_realloc_r+0x14>
 800596a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800596e:	4611      	mov	r1, r2
 8005970:	f7ff bf9c 	b.w	80058ac <_malloc_r>
 8005974:	b922      	cbnz	r2, 8005980 <_realloc_r+0x20>
 8005976:	f7ff ff49 	bl	800580c <_free_r>
 800597a:	4625      	mov	r5, r4
 800597c:	4628      	mov	r0, r5
 800597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005980:	f000 f830 	bl	80059e4 <_malloc_usable_size_r>
 8005984:	42a0      	cmp	r0, r4
 8005986:	d20f      	bcs.n	80059a8 <_realloc_r+0x48>
 8005988:	4621      	mov	r1, r4
 800598a:	4638      	mov	r0, r7
 800598c:	f7ff ff8e 	bl	80058ac <_malloc_r>
 8005990:	4605      	mov	r5, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	d0f2      	beq.n	800597c <_realloc_r+0x1c>
 8005996:	4631      	mov	r1, r6
 8005998:	4622      	mov	r2, r4
 800599a:	f7ff fbbb 	bl	8005114 <memcpy>
 800599e:	4631      	mov	r1, r6
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff ff33 	bl	800580c <_free_r>
 80059a6:	e7e9      	b.n	800597c <_realloc_r+0x1c>
 80059a8:	4635      	mov	r5, r6
 80059aa:	e7e7      	b.n	800597c <_realloc_r+0x1c>

080059ac <_sbrk_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d06      	ldr	r5, [pc, #24]	; (80059c8 <_sbrk_r+0x1c>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	602b      	str	r3, [r5, #0]
 80059b8:	f7fb fe10 	bl	80015dc <_sbrk>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_sbrk_r+0x1a>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_sbrk_r+0x1a>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	20000610 	.word	0x20000610

080059cc <__malloc_lock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <__malloc_lock+0x8>)
 80059ce:	f000 b811 	b.w	80059f4 <__retarget_lock_acquire_recursive>
 80059d2:	bf00      	nop
 80059d4:	20000618 	.word	0x20000618

080059d8 <__malloc_unlock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__malloc_unlock+0x8>)
 80059da:	f000 b80c 	b.w	80059f6 <__retarget_lock_release_recursive>
 80059de:	bf00      	nop
 80059e0:	20000618 	.word	0x20000618

080059e4 <_malloc_usable_size_r>:
 80059e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e8:	1f18      	subs	r0, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bfbc      	itt	lt
 80059ee:	580b      	ldrlt	r3, [r1, r0]
 80059f0:	18c0      	addlt	r0, r0, r3
 80059f2:	4770      	bx	lr

080059f4 <__retarget_lock_acquire_recursive>:
 80059f4:	4770      	bx	lr

080059f6 <__retarget_lock_release_recursive>:
 80059f6:	4770      	bx	lr

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
